{
  "openapi": "3.0.3",
  "info": {
    "title": "Fawn APIs",
    "description": "this document contains all the APIs provided by Fawn",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "components": {
    "schemas": {
      "HttpResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "status": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "type",
          "status",
          "message",
          "description",
          "data"
        ]
      },
      "CreateAkitaDTO": {
        "type": "object",
        "properties": {
          "mac_address": {
            "type": "string",
            "example": "1C:69:7A:7C:FD:CE",
            "description": "Akita's MAC address",
            "pattern": "/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/"
          },
          "ip": {
            "type": "string",
            "example": "192.168.1.1",
            "description": "Akita's IP address"
          },
          "configuration": {
            "type": "object",
            "example": {
              "mqtt_topic_suffix": "F6365BFEFFE20A68"
            },
            "description": "Akita's configuration"
          },
          "place_id": {
            "type": "string",
            "example": "630e14096015a68525328ce5",
            "description": "Akita's place ID (from Kaiser database)"
          },
          "devices": {
            "type": "array",
            "example": [
              {
                "device_id": "6321aa0f014fe30007dc3322"
              },
              {
                "device_id": "630e14096015a68525328ce6"
              }
            ],
            "description": "List of akita's devices"
          }
        },
        "required": [
          "mac_address",
          "ip"
        ]
      },
      "GetAkitaInputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "61e51d0ba4864953ba406b06",
            "description": "Akita ID"
          },
          "mac_address": {
            "type": "string",
            "example": "1C:69:7A:7C:FD:CE",
            "description": "Akita's MAC address",
            "pattern": "/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/"
          },
          "ip": {
            "type": "string",
            "example": "192.168.1.1",
            "description": "Akita's IP address"
          },
          "configuration": {
            "type": "object",
            "example": {
              "mqtt_topic_suffix": "F6365BFEFFE20A68"
            },
            "description": "Akita's configuration"
          },
          "place_id": {
            "type": "string",
            "example": "630e14096015a68525328ce5",
            "description": "Akita's place ID (from Kaiser database)"
          },
          "devices": {
            "type": "array",
            "example": [
              {
                "device_id": "6321aa0f014fe30007dc3322"
              },
              {
                "device_id": "630e14096015a68525328ce6"
              }
            ],
            "description": "List of akita's devices"
          }
        },
        "required": [
          "mac_address",
          "ip"
        ]
      },
      "GetAkitaOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "61e51d0ba4864953ba406b06",
            "description": "Akita ID"
          },
          "mac_address": {
            "type": "string",
            "example": "1C:69:7A:7C:FD:CE",
            "description": "Akita's MAC address",
            "pattern": "/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/"
          },
          "ip": {
            "type": "string",
            "example": "192.168.1.1",
            "description": "Akita's IP address"
          },
          "configuration": {
            "type": "object",
            "example": {
              "mqtt_topic_suffix": "F6365BFEFFE20A68"
            },
            "description": "Akita's configuration"
          },
          "place_id": {
            "type": "string",
            "example": "630e14096015a68525328ce5",
            "description": "Akita's place ID (from Kaiser database)"
          },
          "devices": {
            "type": "array",
            "example": [
              {
                "device_id": "6321aa0f014fe30007dc3322"
              },
              {
                "device_id": "630e14096015a68525328ce6"
              }
            ],
            "description": "List of akita's devices"
          }
        },
        "required": []
      },
      "UpdateAkitaDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "61e51d0ba4864953ba406b06",
            "description": "Akita ID"
          },
          "mac_address": {
            "type": "string",
            "example": "1C:69:7A:7C:FD:CE",
            "description": "Akita's MAC address",
            "pattern": "/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/"
          },
          "ip": {
            "type": "string",
            "example": "192.168.1.1",
            "description": "Akita's IP address"
          },
          "configuration": {
            "type": "object",
            "example": {
              "mqtt_topic_suffix": "F6365BFEFFE20A68"
            },
            "description": "Akita's configuration"
          },
          "place_id": {
            "type": "string",
            "example": "630e14096015a68525328ce5",
            "description": "Akita's place ID (from Kaiser database)"
          },
          "devices": {
            "type": "array",
            "example": [
              {
                "device_id": "6321aa0f014fe30007dc3322"
              },
              {
                "device_id": "630e14096015a68525328ce6"
              }
            ],
            "description": "List of akita's devices"
          }
        },
        "required": []
      },
      "CreateDeviceDTO": {
        "type": "object",
        "properties": {
          "info": {
            "description": "Device information array (key-value pair)",
            "type": "array",
            "example": [
              {
                "key": "TITLE",
                "value": "Smart locke"
              },
              {
                "key": "CONTRIBUTER_NAME",
                "value": "Dipal"
              }
            ]
          },
          "config": {
            "description": "Device configuration array (key-value pair)",
            "type": "array",
            "example": [
              {
                "key": "IP_ADDRESS_V6",
                "value": "fd33:cc3e:d70e:0:cf18:ec4a:6ff3:fff8"
              },
              {
                "key": "ROOM_ID",
                "value": "6217490c15e4d085ed463dd2"
              }
            ]
          }
        }
      },
      "GetDeviceInputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "61e51d0ba4864953ba406b06",
            "description": "Device ID"
          },
          "info": {
            "description": "Device information array (key-value pair)",
            "type": "array",
            "example": [
              {
                "key": "TITLE",
                "value": "Smart locke"
              },
              {
                "key": "CONTRIBUTER_NAME",
                "value": "Dipal"
              }
            ]
          },
          "config": {
            "description": "Device configuration array (key-value pair)",
            "type": "array",
            "example": [
              {
                "key": "IP_ADDRESS_V6",
                "value": "fd33:cc3e:d70e:0:cf18:ec4a:6ff3:fff8"
              },
              {
                "key": "ROOM_ID",
                "value": "6217490c15e4d085ed463dd2"
              }
            ]
          }
        }
      },
      "GetDeviceOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "61e51d0ba4864953ba406b06",
            "description": "Device ID"
          },
          "info": {
            "description": "Device information array (key-value pair)",
            "type": "array",
            "example": [
              {
                "key": "TITLE",
                "value": "Smart locke"
              },
              {
                "key": "CONTRIBUTER_NAME",
                "value": "Dipal"
              }
            ]
          },
          "config": {
            "description": "Device configuration array (key-value pair)",
            "type": "array",
            "example": [
              {
                "key": "IP_ADDRESS_V6",
                "value": "fd33:cc3e:d70e:0:cf18:ec4a:6ff3:fff8"
              },
              {
                "key": "ROOM_ID",
                "value": "6217490c15e4d085ed463dd2"
              }
            ]
          }
        }
      },
      "UpdateDeviceDTO": {
        "type": "object",
        "properties": {
          "info": {
            "description": "Device information array (key-value pair)",
            "type": "array",
            "example": [
              {
                "key": "TITLE",
                "value": "Smart locke"
              },
              {
                "key": "CONTRIBUTER_NAME",
                "value": "Dipal"
              }
            ]
          },
          "config": {
            "description": "Device configuration array (key-value pair)",
            "type": "array",
            "example": [
              {
                "key": "IP_ADDRESS_V6",
                "value": "fd33:cc3e:d70e:0:cf18:ec4a:6ff3:fff8"
              },
              {
                "key": "ROOM_ID",
                "value": "6217490c15e4d085ed463dd2"
              }
            ]
          }
        }
      },
      "DoorLockDTO": {
        "type": "object",
        "description": "Smarthome toggle door lock",
        "properties": {
          "lock": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "lock"
        ]
      }
    }
  },
  "paths": {
    "/api/v1/doorlock": {
      "post": {
        "operationId": "DoorLock_toggle",
        "summary": "Unlocks some smart lock",
        "description": "Unlocks some smart lock door without any device ID",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoorLockDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Smart home"
        ]
      }
    },
    "/api/v1/intercom/{id}/unlock": {
      "get": {
        "operationId": "Intercom_unlock",
        "summary": "Unlocks the intercom door",
        "description": "Unlocks the intercom door by device ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "mongo id of the intercom (from `device` collection )",
            "example": "63246a30efefc192e26838cd",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Intercom"
        ]
      }
    },
    "/api/v1/intercom/{id}/cancel-call": {
      "delete": {
        "operationId": "Intercom_cancel",
        "summary": "Cancels the intercom call",
        "description": "Cancels the intercom call by device ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "mongo id of the intercom (from `device` collection )",
            "example": "63246a30efefc192e26838cd",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Intercom"
        ]
      }
    },
    "/api/v1/akita": {
      "post": {
        "operationId": "AkitaCRUDController_createAkita",
        "summary": "Creates an akita",
        "description": "Creates a new akita",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAkitaDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Success"
                        },
                        "status": {
                          "type": "number",
                          "example": 201
                        },
                        "message": {
                          "type": "string",
                          "example": "Created"
                        },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": {
                            "id": "63383ae40a36136c2301bc5b"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Client Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 409
                        },
                        "message": {
                          "type": "string",
                          "example": "Conflict"
                        },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Server Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 500
                        },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "AkitaCRUDController_list",
        "summary": "Lists all akitas",
        "description": "Lists all akitas in the database",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Success"
                        },
                        "status": {
                          "type": "number",
                          "example": 200
                        },
                        "message": {
                          "type": "string",
                          "example": "OK"
                        },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetAkitaOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Client Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 404
                        },
                        "message": {
                          "type": "string",
                          "example": "Not Found"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Server Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 500
                        },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "AkitaCRUDController_update",
        "summary": "Updates the akita",
        "description": "Updates the akita by filter",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDocumentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Success"
                        },
                        "status": {
                          "type": "number",
                          "example": 200
                        },
                        "message": {
                          "type": "string",
                          "example": "OK"
                        },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Redirection"
                        },
                        "status": {
                          "type": "number",
                          "example": 304
                        },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Client Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 404
                        },
                        "message": {
                          "type": "string",
                          "example": "Not Found"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Server Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 500
                        },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "AkitaCRUDController_delete",
        "summary": "Deletes the akita",
        "description": "Deletes the akita by something",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAkitaInputDTO"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Success"
                        },
                        "status": {
                          "type": "number",
                          "example": 204
                        },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Client Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 404
                        },
                        "message": {
                          "type": "string",
                          "example": "Not Found"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Server Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 500
                        },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/akita/findone": {
      "get": {
        "operationId": "AkitaCRUDController_findBy",
        "summary": "Finds a specific akita",
        "description": "Finds one specific akita by filter",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAkitaInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/akita/findall": {
      "get": {
        "operationId": "AkitaCRUDController_findAll",
        "summary": "Finds the group of akitas",
        "description": "Finds all akitas by filter",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAkitaInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/akita/subcol": {
      "post": {
        "operationId": "AkitaCRUDController_pushSubcol",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushToSubcolDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      },
      "get": {
        "operationId": "AkitaCRUDController_listSubcol",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindInSubcolDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "AkitaCRUDController_updateSubcol",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDocumentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "AkitaCRUDController_deleteSubcol",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindInSubcolDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/akita/subcol/findone": {
      "get": {
        "operationId": "AkitaCRUDController_findSubcolBy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindInSubcolDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/akita/subcol/findall": {
      "get": {
        "operationId": "AkitaCRUDController_findAllSubcolBy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindInSubcolDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/akita/subdoc": {
      "put": {
        "operationId": "AkitaCRUDController_updateSubdoc",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/device": {
      "post": {
        "operationId": "DeviceCRUDController_createAkita",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeviceDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Success"
                        },
                        "status": {
                          "type": "number",
                          "example": 201
                        },
                        "message": {
                          "type": "string",
                          "example": "Created"
                        },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": {
                            "id": "63383ae40a36136c2301bc5b"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Client Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 409
                        },
                        "message": {
                          "type": "string",
                          "example": "Conflict"
                        },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Server Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 500
                        },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "DeviceCRUDController_list",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Success"
                        },
                        "status": {
                          "type": "number",
                          "example": 200
                        },
                        "message": {
                          "type": "string",
                          "example": "OK"
                        },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetDeviceOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Client Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 404
                        },
                        "message": {
                          "type": "string",
                          "example": "Not Found"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Server Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 500
                        },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "DeviceCRUDController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDocumentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Success"
                        },
                        "status": {
                          "type": "number",
                          "example": 200
                        },
                        "message": {
                          "type": "string",
                          "example": "OK"
                        },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Redirection"
                        },
                        "status": {
                          "type": "number",
                          "example": 304
                        },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Client Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 404
                        },
                        "message": {
                          "type": "string",
                          "example": "Not Found"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Server Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 500
                        },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeviceCRUDController_delete",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDeviceInputDTO"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Success"
                        },
                        "status": {
                          "type": "number",
                          "example": 204
                        },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/HttpResponse"
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Client Error"
                        },
                        "status": {
                          "type": "number",
                          "example": 404
                        },
                        "message": {
                          "type": "string",
                          "example": "Not Found"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "any",
                          "example": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/device/findone": {
      "get": {
        "operationId": "DeviceCRUDController_findBy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDeviceInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/device/findall": {
      "get": {
        "operationId": "DeviceCRUDController_findAll",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDeviceInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/device/subcol": {
      "post": {
        "operationId": "DeviceCRUDController_pushSubcol",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushToSubcolDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      },
      "get": {
        "operationId": "DeviceCRUDController_listSubcol",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindInSubcolDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "DeviceCRUDController_updateSubcol",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDocumentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "DeviceCRUDController_deleteSubcol",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindInSubcolDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/device/subcol/findone": {
      "get": {
        "operationId": "DeviceCRUDController_findSubcolBy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindInSubcolDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/device/subcol/findall": {
      "get": {
        "operationId": "DeviceCRUDController_findAllSubcolBy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindInSubcolDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/device/subdoc": {
      "put": {
        "operationId": "DeviceCRUDController_updateSubdoc",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/kafka/controller": {
      "post": {
        "operationId": "KafkaController_add",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "KafkaController_delete",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "KafkaController_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kafka/controller/list": {
      "get": {
        "operationId": "KafkaController_getList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kafka/controller/info": {
      "get": {
        "operationId": "KafkaController_getInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kafka/controller/test": {
      "get": {
        "operationId": "KafkaController_httpTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "undefined": {
      "undefined": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  }
}