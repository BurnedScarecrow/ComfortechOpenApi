{
    "openapi": "3.0.0",
    "info": {
      "title": "Iguana API",
      "description": "List of all apis with the model and the description",
      "version": "1.0",
      "contact": {}
    },
    "tags": [
      {
        "name": "Profile",
        "description": "Profile APIs (services, devices, set data etc etc)"
      },
      {
        "name": "User places",
        "description": "User places APIs (adding removing etc)"
      },
      {
        "name": "Room",
        "description": "Room APIs (adding removing etc)"
      },
      {
        "name": "User devices",
        "description": "User devices APIs (connecting, removing etc)"
      },
      {
        "name": "User services",
        "description": "User services APIs (subscribing, removing, etc)"
      },
      {
        "name": "Services",
        "description": "Providable services APIs (eg list available)"
      },
      {
        "name": "Camera",
        "description": "Camera APIs (eg list available)"
      },
      {
        "name": "Intercom",
        "description": "Intercom APIs (eg list available)"
      },
      {
        "name": "Device",
        "description": "Device APIs (eg list available or get information of some specific device)"
      },
      {
        "name": "Smarthome",
        "description": "List of smarthome APIs for working with smarthome devices"
      },
      {
        "name": "Activity tracker",
        "description": "User profile activity tracker APIs"
      },
      {
        "name": "Settings",
        "description": "User app settings APIs"
      },
      {
        "name": "Metrics",
        "description": "Metrics APIs"
      },
      {
        "name": "Billing",
        "description": "Billing APIs (eg connect billing account)"
      },
      {
        "name": "Account",
        "description": "Account APIs (keycloak)"
      },
      {
        "name": "Üseless for frontend",
        "description": "Some APIs that frontenders wouldn't probably need in future"
      }
    ],
    "servers": [],
    "components": {
      "securitySchemes": {
        "bearer": {
          "scheme": "bearer",
          "bearerFormat": "JWT",
          "type": "http"
        }
      },
      "schemas": {
        "": {
          "type": "object",
          "properties": {
            "registration_token": {
              "type": "string",
              "description": "Registration firebase token",
              "example": "fwcHeh8bSh6KRGQPd-6B2H:APA91bEV1KGorVt7bPHcgbuRCJrxWVmgXdUZvVmnOfB9rYhDGAudTtSvZu8qwT_hErYp0ONWR8MQIzpN6B7FlwdpMMYG2vjU1T1KXE0NEKhZc1d8hc9YwKWqXqNgyMnRuhN074Wziw9Q"
            }
          },
          "required": [
            "registration_token"
          ]
        },
        "SetPasswordDTO": {
          "type": "object",
          "properties": {
            "activation_code": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          },
          "required": [
            "activation_code",
            "password"
          ]
        },
        "ResetPasswordRequestInputDTO": {
          "type": "object",
          "properties": {
            "password": {
              "type": "string"
            }
          },
          "required": [
            "password"
          ]
        },
        "ServiceDto": {
          "type": "object",
          "properties": {
            "service_id": {
              "type": "string",
              "description": "Id of the service",
              "example": "632469f3efefc192e26838cc"
            },
            "is_muted": {
              "type": "boolean",
              "description": "Is the service muted",
              "example": false
            }
          },
          "required": [
            "service_id",
            "is_muted"
          ]
        },
        "NotificationDto": {
          "type": "object",
          "properties": {
            "services": {
              "description": "The apperiance of the service",
              "example": {
                "service_id": "632469f3efefc192e26838cc",
                "is_muted": false
              },
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServiceDto"
                }
              ]
            },
            "do_not_disturb": {
              "type": "boolean",
              "description": "Do-not-disturb mode",
              "example": false
            }
          }
        },
        "PlatformDto": {
          "type": "object",
          "properties": {
            "platform": {
              "type": "string",
              "description": "The platform name",
              "enum": [
                "android",
                "ios"
              ],
              "example": "android"
            },
            "light_mode": {
              "type": "boolean",
              "description": "Is light mode",
              "example": true
            },
            "dark_mode": {
              "type": "boolean",
              "description": "Is dark mode",
              "example": true
            }
          }
        },
        "ApperianceDto": {
          "type": "object",
          "properties": {
            "platforms": {
              "description": "Platforms",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlatformDto"
              }
            }
          },
          "required": [
            "platforms"
          ]
        },
        "SettingsDto": {
          "type": "object",
          "properties": {
            "language": {
              "type": "string",
              "description": "User's language",
              "example": "Russian"
            },
            "notification": {
              "description": "Notification settings",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NotificationDto"
                }
              ]
            },
            "apperiance": {
              "description": "Apperiance inforamation",
              "example": false,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApperianceDto"
                }
              ]
            },
            "widgets": {
              "type": "object",
              "description": "Widgets (not implemented in DTO)",
              "example": {
                "key": "value"
              }
            }
          }
        },
        "DoorLockDTO": {
          "type": "object",
          "properties": {
            "lock": {
              "type": "boolean",
              "description": "Lock status (true for lock, false for unlock)",
              "example": true
            }
          },
          "required": [
            "lock"
          ]
        },
        "SetNameDTO": {
          "type": "object",
          "properties": {
            "first_name": {
              "type": "string",
              "description": "Firstname of user",
              "example": "Alexander"
            },
            "last_name": {
              "type": "string",
              "description": "lastname of user",
              "example": "Evsikov"
            },
            "patronymic": {
              "type": "string",
              "description": "Patronimic of user",
              "example": "Olegovich"
            }
          },
          "required": [
            "first_name"
          ]
        },
        "SetAccountNumberDTO": {
          "type": "object",
          "properties": {
            "account_number": {
              "type": "string",
              "description": "The account number",
              "example": "f03e0837-4841-4962-be11-9391a224da5d"
            }
          },
          "required": [
            "account_number"
          ]
        },
        "UserDataDTO": {
          "type": "object",
          "properties": {
            "first_name": {
              "type": "string",
              "description": "Name",
              "example": "Ivan"
            },
            "last_name": {
              "type": "string",
              "description": "Sirname",
              "example": "Ivanov"
            },
            "patronymic": {
              "type": "string",
              "description": "Patronimic",
              "example": "Ivanovich"
            },
            "sex": {
              "type": "string",
              "description": "male/female",
              "example": "male"
            },
            "birthday": {
              "format": "date-time",
              "type": "string",
              "description": "birthdate",
              "example": "1663534923057"
            },
            "avatar": {
              "type": "string",
              "description": "URL to avatar image",
              "example": "http://example.com/avatars/1.png"
            },
            "phone": {
              "type": "string",
              "description": "Phone number",
              "example": "+79998887766"
            },
            "email": {
              "type": "string",
              "description": "email address",
              "example": "example@email.domain"
            }
          },
          "required": [
            "first_name",
            "last_name",
            "phone",
            "email"
          ]
        },
        "UpdateAddressDTO": {
          "type": "object",
          "properties": {
            "address_line_one": {
              "type": "string",
              "description": "Address line one (entrance, apartment)",
              "example": "2 entrance, 33 apatrment"
            },
            "address_line_two": {
              "type": "string",
              "description": "Address line two (street, house)",
              "example": "Professora Popova street, 5"
            },
            "country": {
              "type": "string",
              "description": "Address country",
              "example": "Russia"
            },
            "province": {
              "type": "string",
              "description": "Province (region)",
              "example": "Leningradskaya Oblast"
            },
            "city": {
              "type": "string",
              "description": "City",
              "example": "Saint-Petersburg"
            },
            "postal_code": {
              "type": "string",
              "description": "Postal code (postal index)",
              "example": "192186"
            },
            "location": {
              "type": "object",
              "properties": {
                "longitude": {
                  "required": true,
                  "type": "number"
                },
                "latitude": {
                  "required": true,
                  "type": "number"
                }
              }
            }
          },
          "required": [
            "location"
          ]
        },
        "UpdateContactDTO": {
          "type": "object",
          "properties": {
            "contact_type": {
              "type": "object",
              "description": "type of contact (\"phone_number\" | \"mobile_number\" | \"email\")",
              "example": "email"
            },
            "value": {
              "type": "string",
              "description": "value of contact (phone number | email addres)",
              "example": "example@email.domain"
            },
            "verification": {
              "type": "object",
              "properties": {
                "last_verification_code": {
                  "required": true,
                  "type": "string"
                },
                "code_creation_time": {
                  "format": "date-time",
                  "required": true,
                  "type": "string"
                },
                "is_sent": {
                  "required": true,
                  "type": "boolean"
                },
                "is_verified": {
                  "required": true,
                  "type": "boolean"
                },
                "is_expired": {
                  "required": true,
                  "type": "boolean"
                },
                "next_try": {
                  "type": "object",
                  "properties": {
                    "in_sec": {
                      "required": true,
                      "type": "number"
                    },
                    "available_tries_before_ban": {
                      "required": true,
                      "type": "number"
                    },
                    "is_banned": {
                      "required": true,
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "required": [
            "contact_type",
            "value",
            "verification"
          ]
        },
        "IncreaseBalanceDTO": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number",
              "description": "Amount of money to increase balance",
              "example": "1000"
            }
          },
          "required": [
            "amount"
          ]
        },
        "AddServiceDTO": {
          "type": "object",
          "properties": {
            "service_id": {
              "type": "string",
              "description": "Mongo id of the service",
              "example": "632469f3efefc192e26838cc"
            },
            "current_plan_id": {
              "type": "string",
              "description": "Mongo id of the current plan",
              "example": "63260fdf3fea78a47ecdc79f"
            },
            "place_id": {
              "type": "string",
              "description": "Mongo id of the place",
              "example": "631749ea24fb4fc46bbe08e6"
            }
          },
          "required": [
            "service_id",
            "place_id"
          ]
        },
        "ToggleLightDeviceDTO": {
          "type": "object",
          "properties": {
            "state": {
              "type": "object",
              "description": "State of the light device \"on\" | \"off\"",
              "example": "off"
            }
          },
          "required": [
            "state"
          ]
        },
        "AddUserPlaceDTO": {
          "type": "object",
          "properties": {
            "place_id": {
              "type": "string",
              "description": "MongoId of a user-place",
              "example": "61e51d05d10fcc0a53b8cbd9"
            },
            "name": {
              "type": "string",
              "description": "Custom user-place name given by user",
              "example": "My flat"
            }
          }
        },
        "UpdateUserPlaceDTO": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Custom user-place name given by user",
              "example": "My flat"
            }
          }
        },
        "RoomDeviceInput": {
          "type": "object",
          "properties": {
            "device_id": {
              "type": "string",
              "description": "Device's ID (Mongo ID)",
              "example": "62b331033073b331e567e44f"
            },
            "room_id": {
              "type": "string",
              "description": "Room ID (Mongo ID)",
              "example": "62b331033073b331e545a33c"
            }
          },
          "required": [
            "device_id",
            "room_id"
          ]
        },
        "ServiceDeviceInputDTO": {
          "type": "object",
          "properties": {
            "service_id": {
              "type": "string",
              "description": "Service id (mongo id)",
              "example": "63230b08029aa7cc70961e0b"
            },
            "device_id": {
              "type": "string",
              "description": "Device id (mongo id)",
              "example": "63230b08029aa7cc70961e0c"
            },
            "place_id": {
              "type": "string",
              "description": "Place id (mongo id)",
              "example": "63230b08029aa7cc70961e0d"
            }
          },
          "required": [
            "service_id",
            "device_id",
            "place_id"
          ]
        },
        "GetCameraOutputDTO": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Mongo id of camera"
            },
            "title": {
              "type": "string",
              "description": "Custom title of camera",
              "example": "Eye of Sauron"
            },
            "stream_id": {
              "type": "string",
              "description": "Id of a stream"
            },
            "channels": {
              "description": "array of channels (IDs)",
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "configuration": {
              "type": "object",
              "description": "Configuration of camera ",
              "example": {
                "key": "value"
              }
            },
            "info": {
              "type": "object",
              "description": "Info about the camera ",
              "example": {
                "key": "value"
              }
            }
          },
          "required": [
            "id"
          ]
        },
        "StreamConfigurationDTO": {
          "type": "object",
          "properties": {
            "host": {
              "type": "string"
            },
            "port": {
              "type": "string"
            },
            "user": {
              "type": "string"
            },
            "pass": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "host",
            "port"
          ]
        },
        "SipConfigurationDTO": {
          "type": "object",
          "properties": {
            "webSocketUrl": {
              "type": "string"
            },
            "uri": {
              "type": "string"
            },
            "authorizationUser": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            }
          }
        },
        "HttpConfigurationDTO": {
          "type": "object",
          "properties": {
            "host": {
              "type": "string"
            },
            "port": {
              "type": "string"
            },
            "user": {
              "type": "string"
            },
            "pass": {
              "type": "string"
            }
          },
          "required": [
            "host",
            "port"
          ]
        },
        "IntercomConfigurationDTO": {
          "type": "object",
          "properties": {
            "stream": {
              "$ref": "#/components/schemas/StreamConfigurationDTO"
            },
            "sip": {
              "$ref": "#/components/schemas/SipConfigurationDTO"
            },
            "http": {
              "$ref": "#/components/schemas/HttpConfigurationDTO"
            }
          }
        },
        "GetIntercomOutputDTO": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "id of Intercom "
            },
            "title": {
              "type": "string",
              "description": "Custom title of camera ",
              "example": "My Intercom"
            },
            "stream_id": {
              "type": "string",
              "description": "stream id of intercom "
            },
            "channels": {
              "description": "Array of channels of the intercom",
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "flats": {
              "description": "the flats list",
              "example": [
                {
                  "place_id": "16e808653abde7b5ef"
                }
              ],
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "info": {
              "type": "object",
              "description": "Info about the intercom ",
              "example": {
                "key": "value"
              }
            },
            "configuration": {
              "description": "Configuration of intercom ",
              "example": {
                "key": "value"
              },
              "allOf": [
                {
                  "$ref": "#/components/schemas/IntercomConfigurationDTO"
                }
              ]
            }
          },
          "required": [
            "id"
          ]
        },
        "GetDeviceOutputDTO": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Device id"
            },
            "title": {
              "type": "string",
              "description": "The title of device",
              "example": "Fireman"
            },
            "type": {
              "type": "string",
              "description": "he type of device (intercom, doorlock, etc.)",
              "example": "intercom"
            },
            "group": {
              "type": "string",
              "description": "The group of device (smart home, utility, etc.)",
              "example": "utility"
            },
            "eui": {
              "type": "string",
              "description": "The device zigbee id"
            },
            "info": {
              "type": "object",
              "description": "The device info",
              "example": {
                "key": "value"
              }
            },
            "configuration": {
              "type": "object",
              "description": "The device configuration",
              "example": {
                "key": "value"
              }
            }
          }
        },
        "CreateRoomDTO": {
          "type": "object",
          "properties": {
            "room_type": {
              "type": "string",
              "description": "Room type (hall, toilet, kitchen)",
              "example": "toilet"
            },
            "name": {
              "type": "string",
              "description": "Custom namefor the room",
              "example": "My favourite toilet"
            },
            "parent_id": {
              "type": "string",
              "description": "Mongo id of the flat (parent of this room)",
              "example": "61e51d05d10fcc0a53b8cbd9"
            }
          },
          "required": [
            "room_type"
          ]
        },
        "UpdateRoomDTO": {
          "type": "object",
          "properties": {
            "room_type": {
              "type": "string",
              "description": "Room type (hall, toilet, kitchen)",
              "example": "toilet"
            },
            "name": {
              "type": "string",
              "description": "Custom room name",
              "example": "My magestic toilet"
            }
          }
        },
        "ConnectBillingDTO": {
          "type": "object",
          "properties": {
            "account_number": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          },
          "required": [
            "account_number",
            "password"
          ]
        },
        "BillingDataOutputDTO": {
          "type": "object",
          "properties": {
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "patronimyc": {
              "type": "string"
            },
            "address": {
              "type": "object"
            }
          },
          "required": [
            "first_name",
            "last_name",
            "patronimyc",
            "address"
          ]
        }
      }
    },
    "paths": {
      "/api/v1/kafka/controller": {
        "post": {
          "operationId": "KafkaController_add",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        },
        "delete": {
          "operationId": "KafkaController_delete",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        },
        "get": {
          "operationId": "KafkaController_get",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        }
      },
      "/api/v1/kafka/controller/list": {
        "get": {
          "operationId": "KafkaController_getList",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        }
      },
      "/api/v1/kafka/controller/info": {
        "get": {
          "operationId": "KafkaController_getInfo",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        }
      },
      "/api/v1/kafka/controller/test": {
        "get": {
          "operationId": "KafkaController_httpTest",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        }
      },
      "undefined": {
        "undefined": {
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "Smarthome"
          ]
        }
      },
      "/api/v1/test/controller": {
        "post": {
          "operationId": "PromAlertController_post",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        },
        "get": {
          "operationId": "PromAlertController_get",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        },
        "delete": {
          "operationId": "PromAlertController_delete",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        }
      },
      "/api/v1/test": {
        "post": {
          "operationId": "TestController_post",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        },
        "get": {
          "operationId": "TestController_get",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        },
        "delete": {
          "operationId": "TestController_delete",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        }
      },
      "/api/v1/test/activity": {
        "get": {
          "operationId": "TestController_activity",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        }
      },
      "/api/v1/health": {
        "get": {
          "operationId": "HealthController_check",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Üseless for frontend"
          ]
        }
      },
      "/api/v1/metrics": {
        "get": {
          "operationId": "MetricsController_metrics",
          "summary": "Gets metrics from the service",
          "description": "NOT IMPLEMENTED",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "Metrics"
          ]
        }
      },
      "/api/v1/account": {
        "get": {
          "operationId": "AccountController_getAccountInfo",
          "summary": "returns back the user account Information",
          "deprecated": true,
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Account"
          ]
        },
        "post": {
          "operationId": "AccountController_create",
          "summary": "creates a new user by email or phone",
          "deprecated": true,
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/"
                  }
                }
              }
            }
          },
          "tags": [
            "Account"
          ]
        },
        "delete": {
          "operationId": "AccountController_delete",
          "summary": "deletes the account",
          "deprecated": true,
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Account"
          ]
        }
      },
      "/api/v1/account/activate-code": {
        "post": {
          "operationId": "AccountController_activateCode",
          "summary": "activates the code that was sent to the new user on email or phone",
          "deprecated": true,
          "parameters": [],
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "Account"
          ]
        }
      },
      "/api/v1/account/resend-activation-code": {
        "post": {
          "operationId": "AccountController_resendActivationCode",
          "summary": "resends the activation code",
          "deprecated": true,
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Account"
          ]
        }
      },
      "/api/v1/account/set-password": {
        "post": {
          "operationId": "AccountController_setPassword",
          "summary": "sets the password to the account",
          "deprecated": true,
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetPasswordDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Account"
          ]
        }
      },
      "/api/v1/account/reset-password": {
        "post": {
          "operationId": "AccountController_resetPassword",
          "summary": "resets the password to the account",
          "deprecated": true,
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordRequestInputDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Account"
          ]
        }
      },
      "/api/v1/settings": {
        "get": {
          "operationId": "SettingsController_getSettings",
          "summary": "Returns back the user settings information",
          "parameters": [],
          "responses": {
            "200": {
              "description": "On success (OUTPUT DTO NOT IMPLEMENTED YET)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SettingsDto"
                  }
                }
              }
            }
          },
          "tags": [
            "Settings"
          ]
        },
        "put": {
          "operationId": "SettingsController_updateSettings",
          "summary": "Updates the admin user settings",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "On success"
            }
          },
          "tags": [
            "Settings"
          ]
        }
      },
      "/api/v1/activityTracker/{period}/{limit}": {
        "get": {
          "operationId": "ActivityTrackerController_listActivityNotes",
          "summary": "Lists the user's activity",
          "deprecated": true,
          "parameters": [
            {
              "name": "period",
              "required": true,
              "in": "path",
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "limit",
              "required": true,
              "in": "path",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Activity tracker"
          ]
        }
      },
      "/api/v1/doorlock": {
        "post": {
          "operationId": "DoorLockController_doorLock",
          "summary": "Toggles the dorlock",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoorLockDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "If success"
            },
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "description": "If failed"
            }
          },
          "tags": [
            "Smarthome"
          ]
        }
      },
      "/api/v1/profile": {
        "get": {
          "operationId": "ProfileController_readUserProfile",
          "summary": "Reads the user profile",
          "description": "Get the user profile info",
          "requestBody": {
            "$ref": "#/components/schemas/"
          },
          "parameters": [],
          "responses": {
            "200": {
              "description": "User found and info is provided",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "data": {}
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User was not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was searching user in database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "ProfileController_deleteUserProfile",
          "summary": "Remove user profile",
          "description": "Removes the user profile info",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "204": {
              "description": "Successfully deleted",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 204,
                      "message": "No Content",
                      "data": {}
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "User doesn't have this place",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was operating the database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "ProfileController_setName",
          "summary": "Change user profile info",
          "description": "Edit the user profile name lastname and patronimic",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetNameDTO"
                }
              }
            }
          },
          "parameters": [],
          "responses": {
            "201": {
              "description": "Successfully created",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 201,
                      "message": "Created",
                      "description": "The request has been fulfilled and resulted in a new resource being created",
                      "data": {
                        "id": "632202420bee25ae6a1d6ad6"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "User already has this place added",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 409,
                      "message": "Conflict",
                      "description": "User has this place already",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was searching user in database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/set-account-number": {
        "put": {
          "operationId": "ProfileController_setAccountNumber",
          "summary": "Updates the account number",
          "description": "Set user account_numver in user_profile collection",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetAccountNumberDTO"
                }
              }
            }
          },
          "parameters": [],
          "responses": {
            "200": {
              "description": "Account number successfully edited",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": {}
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Account number was not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "Account number doesn't exist in the billing system",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/user-data": {
        "get": {
          "operationId": "ProfileController_readUserData",
          "summary": "Reads the user data",
          "description": "Get user_data info from user_profile collection",
          "parameters": [],
          "responses": {
            "200": {
              "description": "User found and user data is provided (can be empty object {})",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "user_data": {
                        "first_name": "Alexander",
                        "last_name": "Evsikov"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": ""
            },
            "500": {
              "description": "Error while service was searching user in database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "put": {
          "operationId": "ProfileController_updateUserData",
          "summary": "Sets the profile's first and last name",
          "description": "Set user_data in user_profile collection",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDataDTO"
                }
              }
            }
          },
          "parameters": [],
          "responses": {
            "200": {
              "description": "Data successfully modified",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was searching user in database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/address": {
        "put": {
          "operationId": "ProfileController_updateAddress",
          "summary": "Sets the user address",
          "description": "Set address in user profile",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAddressDTO"
                }
              }
            }
          },
          "parameters": [],
          "responses": {
            "200": {
              "description": "Address successfully modified",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was searching user in database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/contact": {
        "put": {
          "operationId": "ProfileController_updateContact",
          "summary": "Sets the user contact",
          "description": "Set user phone in user profile",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateContactDTO"
                }
              }
            }
          },
          "parameters": [],
          "responses": {
            "200": {
              "description": "Contact successfully modified",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was searching user in database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/set-firebase-token": {
        "post": {
          "operationId": "ProfileController_setFirebaseToken",
          "summary": "Sets the firebase token",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Updated successfully"
            },
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "404": {
              "description": "User representation not found"
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/balance": {
        "put": {
          "operationId": "ProfileController_increaseBalance",
          "summary": "Increase the user balance",
          "description": "Set user balamce in user profile",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncreaseBalanceDTO"
                }
              }
            }
          },
          "parameters": [],
          "responses": {
            "200": {
              "description": "Balance successfully modified",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was searching user in database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/service": {
        "post": {
          "operationId": "UserServiceController_addService",
          "summary": "Subscribes user to service",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddServiceDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Service added",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": {}
                    }
                  }
                }
              }
            },
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "403": {
              "description": "This service doesn't support this place | Not enough money",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 403,
                      "message": "Forbidden",
                      "description": "This service doesn't support this place | Not enough money",
                      "data": {}
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Service or place was not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "The server has not found anything matching the Request-URI",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User services"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "UserServiceController_listServices",
          "summary": "List all profile services",
          "parameters": [],
          "responses": {
            "200": {
              "description": "No errors happened. Info provided. The list of services or empty list",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": [
                        {
                          "current_plan_id": "63260fdf3fea78a47ecdc79f",
                          "service_id": "63246a30efefc192e26838cd"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User services"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/place/{place_id}/service/{service_id}": {
        "delete": {
          "operationId": "UserServiceController_unsubscribeFromService",
          "summary": "Unsubscribes user from service",
          "parameters": [
            {
              "name": "service_id",
              "required": true,
              "in": "path",
              "description": "mongo id of the service (from `service` collection )",
              "example": "63246a30efefc192e26838cd",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "description": "mongo id of the place",
              "example": "61e51d05d10fcc0a53b8cbd9",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Unsubscribed successfully"
            },
            "304": {
              "description": "Was not unsubscribed"
            }
          },
          "tags": [
            "Profile",
            "User services"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "UserServiceController_getService",
          "summary": "Get info about one specific service of user",
          "parameters": [
            {
              "name": "service_id",
              "required": true,
              "in": "path",
              "description": "mongo id of the service (from `service` collection )",
              "example": "63246a30efefc192e26838cd",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "description": "mongo id of the place",
              "example": "61e51d05d10fcc0a53b8cbd9",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No errors happened. Info provided. The info about service provided.",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": {
                        "current_plan_id": "63260fdf3fea78a47ecdc79f",
                        "service_id": "63246a30efefc192e26838cd"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No errors happened. Info provided. The info about service provided.",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "The server has not found anything matching the Request-URI",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User services"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/place/{place_id}/service": {
        "get": {
          "operationId": "UserServiceController_listServicesOfPlace",
          "summary": "Get services of one specific user place",
          "parameters": [
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "description": "mongo id of the place",
              "example": "61e51d05d10fcc0a53b8cbd9",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No errors happened. Info provided. The info about service provided.",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": {
                        "current_plan_id": "63260fdf3fea78a47ecdc79f",
                        "service_id": "63246a30efefc192e26838cd"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No errors happened. Info provided. The info about service provided.",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "The server has not found anything matching the Request-URI",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User services"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/providable-service/{place_id}": {
        "get": {
          "operationId": "ProvidableServiceController_listProvidableService",
          "summary": "Gets a list of providableService",
          "parameters": [
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "description": "The mongo Id of the place",
              "example": "61e51d05d10fcc0a53b8cbd9",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No errors happened. Info provided. The list of services or empty list",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": [
                        {
                          "current_plan_id": "63260fdf3fea78a47ecdc79f",
                          "service_id": "63246a30efefc192e26838cd"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Services",
            "User services"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/light-device/toggle": {
        "post": {
          "operationId": "LightDeviceController_toggleLightDevice",
          "summary": "Toggles the light device",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToggleLightDeviceDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "If success"
            },
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "description": "If failed"
            }
          },
          "tags": [
            "Smarthome"
          ]
        }
      },
      "/api/v1/light-device/state/{device_id}": {
        "get": {
          "operationId": "LightDeviceController_getState",
          "summary": "Gets the specific ligh device state",
          "parameters": [
            {
              "name": "device_id",
              "required": true,
              "in": "path",
              "description": "Id of the light device",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Device found, state returned",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "data": {
                        "state": false
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Device is not in use of this user",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 403,
                      "message": "Forbidden",
                      "data": {}
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Device was not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Smarthome"
          ]
        }
      },
      "/api/v1/user-place": {
        "post": {
          "operationId": "UserPlaceController_addUserPlace",
          "summary": "Add user place",
          "description": "\n    Adds some new place to profile with status: \"pending\";\n  ",
          "externalDocs": {
            "url": "https://www.tomorrowtides.com/api-call-example.html",
            "description": "Api call example"
          },
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserPlaceDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Successfully added",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 201,
                      "message": "Created",
                      "data": {}
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Flat was not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "Flat not found",
                      "data": {}
                    }
                  }
                }
              }
            },
            "409": {
              "description": "User already has this place added",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 409,
                      "message": "Conflict",
                      "description": "User has this place already",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "User places"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "UserPlaceController_listUserPlaces",
          "summary": "List all user-places",
          "description": "Find all user-places owned by ine user by user-id",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "data": [
                        {
                          "place_id": "e8fdd7a1dcd5a7f3705bd30d",
                          "status": "confirmed",
                          "name": "My gorgeous flat",
                          "address": "Flat 12;Floor 3;Section 5;Brandhouse (building 119);Savushkina 42;Saint-Petersburg;Saint-Petersburg;Russia"
                        },
                        {
                          "place_id": "72c970edc65028cbc4e69bcb",
                          "status": "pending",
                          "name": "My second flat",
                          "address": "Flat 12;Floor 3;Section 5;Brandhouse (building 119);Savushkina 42;Saint-Petersburg;Saint-Petersburg;Russia"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "User places"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/user-place/{place_id}": {
        "get": {
          "operationId": "UserPlaceController_readUserPlace",
          "summary": "Read place",
          "description": "Reads information of some concrete user place",
          "parameters": [
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returned",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "place_id": "644fecec56682c270efee6eb",
                      "status": "confirmed",
                      "name": "My gorgeous flat",
                      "address": "Flat 12;Floor 3;Section 5;Brandhouse (building 119);Savushkina 42;Saint-Petersburg;Saint-Petersburg;Russia"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User hasn't got such place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "User doesn't have this place",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "User places"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "UserPlaceController_removeUserPlace",
          "summary": "Removes place",
          "description": "\n    Removes some user place by id\n  ",
          "parameters": [
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "204": {
              "description": "Successfully deleted",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 204,
                      "message": "No Content",
                      "data": {}
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User hasn't got such place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "User doesn't have this place",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "User places"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/user-place/{place_id}/": {
        "put": {
          "operationId": "UserPlaceController_updateUserPlace",
          "summary": "Updates user-place",
          "description": "Find one and update user-place",
          "parameters": [
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPlaceDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "204": {
              "description": "Successfully deleted",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 204,
                      "message": "No Content",
                      "data": {}
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User hasn't got such place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "User doesn't have this place",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "User places"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/device": {
        "post": {
          "operationId": "UserDeviceController_addDeviceToRoom",
          "summary": "Adds a new device to the room",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomDeviceInput"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Added"
            },
            "403": {
              "description": "No access to device or place",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "example": {
                          "description": "User has no access to this device"
                        }
                      },
                      {
                        "example": {
                          "description": "Place not found"
                        }
                      }
                    ]
                  }
                }
              }
            },
            "404": {
              "description": "Room not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "Place not found"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User devices"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "UserDeviceController_removeDeviceFromRoom",
          "summary": "Removes device from the room",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomDeviceInput"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Removed, returns 204 instead of 200!!!",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "No access to place or room not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "User has no access to this place | Place not found"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User devices"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/device/by/room/{room_id}": {
        "get": {
          "operationId": "UserDeviceController_getDevicesInRoom",
          "summary": "Removes device from the room",
          "parameters": [
            {
              "name": "room_id",
              "required": true,
              "in": "path",
              "description": "MongoID place_id if the room",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of devices",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "No access to place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "User doesn't have this place"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User devices"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/device/to/service": {
        "post": {
          "operationId": "UserDeviceController_addDeviceToService",
          "summary": "Adds a new device to the service",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeviceInputDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Added"
            },
            "400": {
              "description": "Trying to work with service that was not implemented",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "Not supported service type."
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User has no service or device was not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "User is not subscribed to this service | Device not found"
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Device is already connected to this service",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "This device is already connected to this service."
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User devices"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/device/of/place/{place_id}/of/service/{service_id}": {
        "get": {
          "operationId": "UserDeviceController_listDevicesOfService",
          "summary": "Gets list of devices from service",
          "parameters": [
            {
              "name": "service_id",
              "required": true,
              "in": "path",
              "description": "Mongo id of a service",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "description": "Mongo id of a place",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of cameras | intercoms | devices",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/GetCameraOutputDTO"
                      },
                      {
                        "$ref": "#/components/schemas/GetIntercomOutputDTO"
                      },
                      {
                        "$ref": "#/components/schemas/GetDeviceOutputDTO"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "No access to place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "User has no access to this place"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User devices"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/device/from/service": {
        "delete": {
          "operationId": "UserDeviceController_removeDeviceFromService",
          "summary": "Removes device from service",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeviceInputDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "204": {
              "description": "Removed, returns 204 instead of 200!!!"
            },
            "404": {
              "description": "User has no service or Device was not connected",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "User is not subscribed to this service | This device is not connected to this service."
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User devices"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/place/{place_id}/device/{device_category}": {
        "get": {
          "operationId": "UserDeviceController_getAvailableDevicesByCategory",
          "summary": "Gets available devices of some place_id",
          "parameters": [
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "description": "mongoID _id of the place",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "device_category",
              "required": true,
              "in": "path",
              "example": "utility",
              "schema": {}
            }
          ],
          "responses": {
            "200": {
              "description": "List of device ids available at this place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": [
                      "63230b08029aa7cc70961e0b",
                      "63230b08029aa7cc70961e0c",
                      "63230b08029aa7cc70961e0d"
                    ]
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User devices"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/profile/place/{place_id}/service/devices/{device_category}": {
        "get": {
          "operationId": "UserDeviceController_getConnectedDevices",
          "summary": "Gets connected to service devices of some place_id",
          "parameters": [
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "description": "Mongo id of the place",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "device_category",
              "required": true,
              "in": "path",
              "description": "(intercom, camera, etc.)",
              "example": "intercom",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of cameras | intercoms | devices | empty list",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/GetCameraOutputDTO"
                      },
                      {
                        "$ref": "#/components/schemas/GetIntercomOutputDTO"
                      },
                      {
                        "$ref": "#/components/schemas/GetDeviceOutputDTO"
                      }
                    ]
                  }
                }
              }
            }
          },
          "tags": [
            "Profile",
            "User devices"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/room": {
        "post": {
          "operationId": "RoomCRUDController_create",
          "summary": "Create new room",
          "description": "Create a new room in a user-plcae",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRoomDTO"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Successfully created",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 201,
                      "message": "Created",
                      "description": "The request has been fulfilled and resulted in a new resource being created",
                      "data": {
                        "id": "632202420bee25ae6a1d6ad6"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "User hasn't got such place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 403,
                      "message": "Forbidden",
                      "description": "User doesn't have this place",
                      "data": {}
                    }
                  }
                }
              }
            },
            "409": {
              "description": "User already has this place added",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 409,
                      "message": "Conflict",
                      "description": "User has this place already",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was operating the database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Room"
          ]
        }
      },
      "/api/v1/room/by/place/{parent_id}": {
        "get": {
          "operationId": "RoomCRUDController_listPlaceRooms",
          "summary": "Get rooms of user-place",
          "description": "Lists rooms of some concrete user place",
          "parameters": [
            {
              "name": "parent_id",
              "required": true,
              "in": "path",
              "description": "Id of a flat (parent of room) ",
              "example": "61e51d05d10fcc0a53b8cbd9",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returned rooms of a user-place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": [
                        {
                          "id": "62e26c6c793c6e6c3df8433b",
                          "name": "hotdog and baloone",
                          "parent_id": "61e51d05d10fcc0a53b8cbd9",
                          "room_type": "hall"
                        },
                        {
                          "id": "62e29ca1fac2087071db3c86",
                          "name": "poopenfarten",
                          "parent_id": "61e51d05d10fcc0a53b8cbd9",
                          "room_type": "toilet"
                        },
                        {
                          "id": "62f2aeb47c68276740c01462",
                          "name": "fjdj",
                          "parent_id": "61e51d05d10fcc0a53b8cbd9",
                          "room_type": "kitchen"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "403": {
              "description": "User hasn't got such place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 403,
                      "message": "Forbidden",
                      "description": "User doesn't have this place",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was operating the database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Room"
          ]
        }
      },
      "/api/v1/room/{id}": {
        "put": {
          "operationId": "RoomCRUDController_update",
          "summary": "Change room info",
          "description": "Edit the room name or type",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "Id of athe room to be updated ",
              "example": "62e29ca1fac2087071db3c86",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRoomDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "description": "The request has succeeded",
                      "data": {}
                    }
                  }
                }
              }
            },
            "403": {
              "description": "User hasn't got such place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 403,
                      "message": "Forbidden",
                      "description": "User doesn't have this place",
                      "data": {}
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Place not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "Place not found",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was operating the database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Room"
          ]
        },
        "delete": {
          "operationId": "RoomCRUDController_delete",
          "summary": "Remove the room",
          "description": "Removes the room from user-place",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "Id of the room to be deleted ",
              "example": "62e29ca1fac2087071db3c86",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "204": {
              "description": "Successfully deleted",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 204,
                      "message": "No Content",
                      "data": {}
                    }
                  }
                }
              }
            },
            "403": {
              "description": "User hasn't got such place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 403,
                      "message": "Forbidden",
                      "description": "User doesn't have this place",
                      "data": {}
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Client Error",
                      "status": 404,
                      "message": "Not Found",
                      "description": "User doesn't have this place",
                      "data": {}
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error while service was operating the database ",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Server Error",
                      "status": 500,
                      "message": "Internal Server Error",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Room"
          ]
        }
      },
      "/api/v1/camera/by/place/{place_id}": {
        "get": {
          "operationId": "CameraController_listByPlace",
          "summary": "lists cameras of some place",
          "deprecated": true,
          "parameters": [
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "description": "mongo id of the place",
              "example": "61e51d05d10fcc0a53b8cbd9",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "403": {
              "description": "user does not have access to this place",
              "content": {
                "application/json": {
                  "schema": {
                    "example": "The server understood the request, but is refusing to fulfill it"
                  }
                }
              }
            },
            "404": {
              "description": "fox or building was not found",
              "content": {
                "application/json": {
                  "schema": {
                    "example": "This place doesn't belong to any building | Fox is not found."
                  }
                }
              }
            }
          },
          "tags": [
            "Camera"
          ]
        }
      },
      "/api/v1/camera": {
        "get": {
          "operationId": "CameraController_list",
          "summary": "lists all available cameras",
          "deprecated": true,
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Camera"
          ]
        }
      },
      "/api/v1/device/{id}": {
        "get": {
          "operationId": "DeviceController_readDevice",
          "summary": "Get a device by id",
          "deprecated": true,
          "description": "Returnes back specific device by id",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "Id of a device",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Device"
          ]
        }
      },
      "/api/v1/device/list/{type}": {
        "get": {
          "operationId": "DeviceController_listDevice",
          "summary": "Get a list of device by type",
          "deprecated": true,
          "description": "Returns the list of user devices of specific type.",
          "parameters": [
            {
              "name": "type",
              "required": true,
              "in": "path",
              "description": "Type of the device (camera intercom, motion sensor)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Device"
          ]
        }
      },
      "/api/v1/intercom/by/place/{place_id}": {
        "get": {
          "operationId": "IntercomController_listByPlace",
          "summary": "llists intercoms of some place",
          "deprecated": true,
          "parameters": [
            {
              "name": "place_id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Intercom"
          ]
        }
      },
      "/api/v1/intercom": {
        "get": {
          "operationId": "IntercomController_list",
          "summary": "llists available intercoms",
          "deprecated": true,
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Intercom"
          ]
        }
      },
      "/api/v1/intercom/{id}/unlock": {
        "get": {
          "operationId": "IntercomController_unlockDoor",
          "summary": "Unlock intercom by id",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "Mongo id of the intercom",
              "example": "61e51d07a4864953ba406afb",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "If success"
            },
            "500": {
              "description": "If failed"
            }
          },
          "tags": [
            "Intercom"
          ]
        }
      },
      "/api/v1/intercom/{id}/cancel-call": {
        "delete": {
          "operationId": "IntercomController_cancelCall",
          "summary": "Cancel the intercom call",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "Mongo id of the intercom",
              "example": "61e51d07a4864953ba406afb",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "If success"
            },
            "500": {
              "description": "If failed"
            }
          },
          "tags": [
            "Intercom"
          ]
        }
      },
      "/api/v1/billing": {
        "post": {
          "operationId": "BillingController_connectBillingAccount",
          "summary": "Requests user data from billing system",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectBillingDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Credentials are right, everything is right, returning billing system data back",
              "schema": {
                "example": {
                  "first_name": "Иосиф",
                  "last_name": "Пригожин",
                  "patronimyc": "Иванович",
                  "address": {
                    "city": "Санкт-Петербург",
                    "street": "Невский пр-кт",
                    "house": "1",
                    "building": null,
                    "flat": "1"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingDataOutputDTO"
                  }
                }
              }
            },
            "400": {
              "description": "Bad account number",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "Bad account number"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Bad billing credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "description": "Bad billing credentials"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Billing"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/api/v1/services": {
        "get": {
          "operationId": "ServicesController_getServices",
          "summary": "Get services available for user",
          "description": "Returnes back all services witch are available (providedle) for all places of user",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Request successfilly executed, available (providable) services returned",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "data": [
                        {
                          "id": "/*service identifier*/",
                          "title": "name of service",
                          "place": "/*place identifier*/",
                          "status": "disabled|active",
                          "type": "intercom|camera|smart_home|utilities|internet",
                          "full_description": "long text about service",
                          "short_description": "short one",
                          "necessary_info": {
                            "key": "value"
                          },
                          "settings": {
                            "*": "*"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Services"
          ]
        }
      },
      "/api/v1/services/{id}": {
        "get": {
          "operationId": "ServicesController_getService",
          "summary": "Get services available for user",
          "description": "Returnes back all services witch are available (providedle) for all places of user",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request successfilly executed, available (providable) services returned",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "type": "Success",
                      "status": 200,
                      "message": "OK",
                      "data": [
                        {
                          "id": "/*service identifier*/",
                          "title": "name of service",
                          "place": "/*place identifier*/",
                          "status": "disabled|active",
                          "type": "intercom|camera|smart_home|utilities|internet",
                          "full_description": "long text about service",
                          "short_description": "short one",
                          "necessary_info": {
                            "key": "value"
                          },
                          "settings": {
                            "*": "*"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Services"
          ]
        }
      }
    }
  }