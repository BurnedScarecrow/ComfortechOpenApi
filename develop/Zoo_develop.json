{
  "openapi": "3.0.0",
  "info": {
    "title": "Zoo_develop APIs",
    "description": "this document contains all the APIs provided by Zoo",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.12"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "paths": {
    "/api/v1/account": {
      "get": {
        "operationId": "AccountController_",
        "summary": "Gets admin's account",
        "description": "Returns the admin's or superadmin's own account",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetAccountDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Account"]
      },
      "post": {
        "operationId": "AccountController_createAccount",
        "summary": "Creates a new account",
        "description": "Creates a new account for user/admin and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateAccountDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": { "description": "" }
        },
        "tags": ["Account"]
      },
      "put": {
        "operationId": "AccountController_updateAccount",
        "summary": "Updates admin's account",
        "description": "Updates the admin's or superadmin's own account",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateAccountDTO" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": { "description": "" },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Account"]
      },
      "delete": {
        "operationId": "AccountController_deleteAccount",
        "summary": "Deletes admin's account",
        "description": "Deletes the admin's or superadmin's own account",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": { "description": "" },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Account"]
      }
    },
    "/api/v1/account/{id}": {
      "get": {
        "operationId": "AccountController_",
        "summary": "Gets the account by id",
        "description": "Returns the account with definite id",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetAccountDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Account"]
      },
      "put": {
        "operationId": "AccountController_updateAccountById",
        "summary": "Updates the account by id",
        "description": "Updates the existing account with definite id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateAccountDTO" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Account"]
      },
      "delete": {
        "operationId": "AccountController_deleteAccountById",
        "summary": "Deletes the account by id",
        "description": "Deletes the existing account with definite id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Account"]
      }
    },
    "/api/v1/test": {
      "post": {
        "operationId": "TestController_post",
        "summary": "Tests POST request",
        "description": "Echoes request",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "message": "POST method received" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Test APIs are forbidden in production",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 403 },
                        "message": { "type": "string", "example": "Forbidden" },
                        "description": {
                          "type": "string",
                          "example": "The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while connecting with SMTP server",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["APIs for testing"]
      },
      "get": {
        "operationId": "TestController_get",
        "summary": "Tests GET request",
        "description": "Echoes request",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "any",
                          "example": { "message": "GET method received" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Test APIs are forbidden in production",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 403 },
                        "message": { "type": "string", "example": "Forbidden" },
                        "description": {
                          "type": "string",
                          "example": "The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while connecting with SMTP server",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["APIs for testing"]
      },
      "delete": {
        "operationId": "TestController_delete",
        "summary": "Tests DELETE request",
        "description": "Echoes request",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "any",
                          "example": { "message": "DELETE method received" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Test APIs are forbidden in production",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 403 },
                        "message": { "type": "string", "example": "Forbidden" },
                        "description": {
                          "type": "string",
                          "example": "The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while connecting with SMTP server",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["APIs for testing"]
      },
      "put": {
        "operationId": "TestController_put",
        "summary": "Tests PUT request",
        "description": "Echoes request",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "any",
                          "example": { "message": "DELETE method received" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Test APIs are forbidden in production",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 403 },
                        "message": { "type": "string", "example": "Forbidden" },
                        "description": {
                          "type": "string",
                          "example": "The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while connecting with SMTP server",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["APIs for testing"]
      }
    },
    "/api/v1/test/activity": {
      "get": {
        "operationId": "TestController_activity",
        "summary": "Creates activity for testing",
        "description": "Creates new activity for user profile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "any",
                          "example": { "message": "GET method received" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Test APIs are forbidden in production",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 403 },
                        "message": { "type": "string", "example": "Forbidden" },
                        "description": {
                          "type": "string",
                          "example": "The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while connecting with SMTP server",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["APIs for testing"]
      }
    },
    "/api/v1/settings": {
      "get": {
        "operationId": "SettingsController_getSettings",
        "summary": "Gets admin's settings",
        "description": "Returns the admin's or superadmin's own settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/SettingsDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Settings CRUD"]
      },
      "put": {
        "operationId": "SettingsController_updateSettings",
        "summary": "Updates admin's settings",
        "description": "Updates the admin's or superadmin's own settings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SettingsDTO" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": { "description": "" },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Settings CRUD"]
      },
      "post": {
        "operationId": "SettingsController_createSettings",
        "summary": "Creates settings",
        "description": "Creates settings for user/admin and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SettingsDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "id": "63383ae40a36136c2301bc5b" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": { "description": "" },
          "500": { "description": "" }
        },
        "tags": ["Settings CRUD"]
      },
      "delete": {
        "operationId": "SettingsController_deleteSettings",
        "summary": "Creates settings for admin",
        "description": "Creates settings for admin and returns it's id",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": { "description": "" },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Settings CRUD"]
      }
    },
    "/api/v1/settings/{id}": {
      "get": {
        "operationId": "SettingsController_getSettingsById",
        "summary": "Gets the settings by id",
        "description": "Returns the settings with definite id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/SettingsDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Settings CRUD"]
      },
      "put": {
        "operationId": "SettingsController_updateSettingsById",
        "summary": "Updates the settings by id",
        "description": "Updates the existing settings with definite id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SettingsDTO" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Settings CRUD"]
      },
      "post": {
        "operationId": "SettingsController_createSettingsById",
        "summary": "Creates settings for admin",
        "description": "Creates settings for admin and returns it's id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SettingsDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "id": "63383ae40a36136c2301bc5b" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": { "description": "" },
          "500": { "description": "" }
        },
        "tags": ["Settings CRUD"]
      },
      "delete": {
        "operationId": "SettingsController_deleteByIdSettings",
        "summary": "Creates settings for admin",
        "description": "Creates settings for admin and returns it's id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Settings CRUD"]
      }
    },
    "/api/v1/notifications/send-email": {
      "post": {
        "operationId": "NotificationsController_sendEmail",
        "summary": "Sends email message",
        "description": "Calls SMTP server to send email message to user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SendEmailMessageDTO" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while connecting with SMTP server",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Notifications"]
      }
    },
    "/api/v1/notifications/send-notification": {
      "post": {
        "operationId": "NotificationsController_sendNotification",
        "summary": "Sends push notification",
        "description": "Calls Firebase server to send push notification to user's smartphone",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SendNotificationDTO" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while connecting with Firebase server",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Notifications"]
      }
    },
    "/api/v1/notifications/send-sms": {
      "post": {
        "operationId": "NotificationsController_sendSms",
        "summary": "Sends sms",
        "description": "Calls SMPP server to send message to user's phone number",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SendSmsMessageDTO" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while connecting with SMPP server",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Notifications"]
      }
    },
    "/api/v1/activity-tracker/{period}/{limit}": {
      "get": {
        "operationId": "ActivityTrackerController_listActivityNotes",
        "summary": "Gets admin's activities",
        "description": "Returns the admin's or superadmin's own activities",
        "parameters": [
          {
            "name": "period",
            "required": true,
            "in": "path",
            "schema": { "type": "number" }
          },
          {
            "name": "limit",
            "required": true,
            "in": "path",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ActivityNoteDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Activity tracker"]
      }
    },
    "/api/v1/activity-tracker/by-id/{id}/{period}/{limit}": {
      "get": {
        "operationId": "ActivityTrackerController_listActivityNotesById",
        "summary": "Gets activitie by id",
        "description": "Returns activities of user with definite id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "period",
            "required": true,
            "in": "path",
            "schema": { "type": "number" }
          },
          {
            "name": "limit",
            "required": true,
            "in": "path",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ActivityNoteDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Activity tracker"]
      }
    },
    "/api/v1/roles": {
      "post": {
        "operationId": "RolesController_createRole",
        "summary": "Creates new role",
        "description": "Creates new role in the app client",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RoleRepresentationDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Roles"]
      },
      "get": {
        "operationId": "RolesController_listRoles",
        "summary": "Lists all roles from keycloak",
        "description": "Returns the list of all the roles from defined client",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RoleRepresentationDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Roles"]
      }
    },
    "/api/v1/roles/{name}": {
      "get": {
        "operationId": "RolesController_readRole",
        "summary": "Gets role by id",
        "description": "Returns the role representation",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/RoleRepresentationDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Roles"]
      },
      "put": {
        "operationId": "RolesController_updateRole",
        "summary": "Updates role representation",
        "description": "Updates the role inside of keycloak app client",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RoleRepresentationDTO" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Roles"]
      },
      "delete": {
        "operationId": "RolesController_deleteRole",
        "summary": "Deletes admin's settings",
        "description": "Deletes the admin's or superadmin's own settings",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Roles"]
      }
    },
    "/api/v1/roles/composites/{name}": {
      "post": {
        "operationId": "RolesController_createComposite",
        "summary": "Creates new composite role",
        "description": "Creates composite role (main role inherits the composite one)",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRoleDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Roles"]
      },
      "get": {
        "operationId": "RolesController_readComposites",
        "summary": "Gets composite roles by main role id",
        "description": "Returns composite roles for main one",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RoleRepresentationDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Roles"]
      },
      "delete": {
        "operationId": "RolesController_deleteComposites",
        "summary": "Deletes composite roles",
        "description": "Deletes the composite role from the list of composites",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "items": {
                      "$ref": "#/components/schemas/RoleRepresentationDTO"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Roles"]
      }
    },
    "/api/v1/role-mappings/{id}": {
      "post": {
        "operationId": "RoleMappingsController_createRoleMapping",
        "summary": "Adds new roles to user",
        "description": "Adds new roles to user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "items": {
                      "$ref": "#/components/schemas/RoleRepresentationDTO"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Role mapping"]
      },
      "get": {
        "operationId": "RoleMappingsController_readRoleMapping",
        "summary": "Gets user's roles",
        "description": "Returns the list of user's roles",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RoleRepresentationDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Role mapping"]
      },
      "delete": {
        "operationId": "RoleMappingsController_deleteRoleMapping",
        "summary": "Deletes roles from user",
        "description": "Deletes the list of user's roles",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "items": {
                      "$ref": "#/components/schemas/RoleRepresentationDTO"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Role mapping"]
      }
    },
    "/api/v1/role-mappings/{id}/available": {
      "get": {
        "operationId": "RoleMappingsController_readAvailableRoles",
        "summary": "Gets available roles",
        "description": "Returns the list of roles available for user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RoleRepresentationDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Role mapping"]
      }
    },
    "/api/v1/base_service": {
      "post": {
        "operationId": "BaseServiceCRUDController_create",
        "summary": "Creates a new baseService",
        "description": "Adds a new baseService to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateBaseServiceDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "id": "63383ae40a36136c2301bc5b" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      },
      "get": {
        "operationId": "BaseServiceCRUDController_list",
        "summary": "Lists all the baseServices",
        "description": "Returns the whole collection of baseServices",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetBaseServiceOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      }
    },
    "/api/v1/base_service/by/{property}/{value}": {
      "get": {
        "operationId": "BaseServiceCRUDController_findBy",
        "summary": "Finds one specific baseService",
        "description": "Takes the property and value and returns a baseService document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetBaseServiceOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      },
      "put": {
        "operationId": "BaseServiceCRUDController_update",
        "summary": "Updates the baseService",
        "description": "Updates the existing document inside the baseService collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateBaseServiceDTO" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      },
      "delete": {
        "operationId": "BaseServiceCRUDController_delete",
        "summary": "Deletes the baseService",
        "description": "Deletes the existing document from the baseService collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      }
    },
    "/api/v1/base_service/all/by/{property}/{value}": {
      "get": {
        "operationId": "BaseServiceCRUDController_findAll",
        "summary": "Finds all specific baseServices",
        "description": "Takes the property and value and returns multiple baseService documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetBaseServiceOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      }
    },
    "/api/v1/base_service/by/{property}/{value}/{subcolName}": {
      "post": {
        "operationId": "BaseServiceCRUDController_pushSubcol",
        "summary": "Pushes subdocument to baseService subcollection",
        "description": "Creates a new subdocument inside baseService's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateServiceNecessaryInfoDTO"
                  },
                  { "$ref": "#/components/schemas/CreateServiceSettingsDTO" }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Data, in baseService was updated successfully. No data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      },
      "get": {
        "operationId": "BaseServiceCRUDController_listSubcol",
        "summary": "Lists the whole subcollection",
        "description": "Return all subdocs from baseService's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/GetServiceNecessaryInfoOutputDTO"
                              },
                              {
                                "$ref": "#/components/schemas/GetServiceSettingsOutputDTO"
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      }
    },
    "/api/v1/base_service/by/{property}/{value}/{subcolName}/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "BaseServiceCRUDController_findSubcolBy",
        "summary": "Finds subdocument in baseService subcollection",
        "description": "Returns one specific subdocument from baseService's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/GetServiceNecessaryInfoOutputDTO"
                            },
                            {
                              "$ref": "#/components/schemas/GetServiceSettingsOutputDTO"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      },
      "put": {
        "operationId": "BaseServiceCRUDController_updateSubcol",
        "summary": "Updates subdoc inside subcollection",
        "description": "Updates the existing subdocument from the baseService's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateServiceNecessaryInfoDTO"
                  },
                  { "$ref": "#/components/schemas/CreateServiceSettingsDTO" }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      },
      "delete": {
        "operationId": "BaseServiceCRUDController_deleteSubcol",
        "summary": "Removes subdoc from subcollection",
        "description": "Deletes subdocument inside baseService's subcollection with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      }
    },
    "/api/v1/base_service/by/{property}/{value}/{subcolName}/all/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "BaseServiceCRUDController_findAllSubcolBy",
        "summary": "Finds all specific subdocs from subcollection",
        "description": "Return all specific subdocs from baseService's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/GetServiceNecessaryInfoOutputDTO"
                              },
                              {
                                "$ref": "#/components/schemas/GetServiceSettingsOutputDTO"
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      }
    },
    "/api/v1/base_service/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "BaseServiceCRUDController_updateSubdoc",
        "summary": "Updates subdocument of baseService",
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateServiceNecessaryInfoDTO"
                  },
                  { "$ref": "#/components/schemas/CreateServiceSettingsDTO" }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["BaseService CRUD"]
      }
    },
    "/api/v1/contract": {
      "post": {
        "operationId": "ContractCRUDController_create",
        "summary": "Creates a new contract",
        "description": "Adds a new contract to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateContractDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "id": "63383ae40a36136c2301bc5b" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      },
      "get": {
        "operationId": "ContractCRUDController_list",
        "summary": "Lists all the contracts",
        "description": "Returns the whole collection of contracts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetContractOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      }
    },
    "/api/v1/contract/by/{property}/{value}": {
      "get": {
        "operationId": "ContractCRUDController_findBy",
        "summary": "Finds one specific contract",
        "description": "Takes the property and value and returns a contract document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetContractOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      },
      "put": {
        "operationId": "ContractCRUDController_update",
        "summary": "Updates the contract",
        "description": "Updates the existing document inside the contract collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateContractDTO" }
            }
          }
        },
        "responses": {
          "200": { "description": "" },
          "304": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Redirection" },
                        "status": { "type": "number", "example": 304 },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      },
      "delete": {
        "operationId": "ContractCRUDController_delete",
        "summary": "Deletes the contract",
        "description": "Deletes the existing document from the contract collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      }
    },
    "/api/v1/contract/all/by/{property}/{value}": {
      "get": {
        "operationId": "ContractCRUDController_findAll",
        "summary": "Finds all specific contracts",
        "description": "Takes the property and value and returns multiple contract documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetContractOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      }
    },
    "/api/v1/contract/by/{property}/{value}/{subcolName}": {
      "post": {
        "operationId": "ContractCRUDController_pushSubcol",
        "summary": "Pushes subdocument to contract subcollection",
        "description": "Creates a new subdocument inside contract's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateContractProvidedServiceDTO"
                  },
                  {
                    "$ref": "#/components/schemas/CreateProvidedInfoAndDocsDTO"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Data, in contract was updated successfully. No data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "Either new data is sae as old one or database canceled transaction",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Informational"
                        },
                        "status": { "type": "number", "example": 304 },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      },
      "get": {
        "operationId": "ContractCRUDController_listSubcol",
        "summary": "Lists the whole subcollection",
        "description": "Return all subdocs from contract's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      }
    },
    "/api/v1/contract/by/{property}/{value}/{subcolName}/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "ContractCRUDController_findSubcolBy",
        "summary": "Finds subdocument in contract subcollection",
        "description": "Returns one specific subdocument from contract's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      },
      "put": {
        "operationId": "ContractCRUDController_updateSubcol",
        "summary": "Updates subdoc inside subcollection",
        "description": "Updates the existing subdocument from the contract's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateContractProvidedServiceDTO"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateProvidedInfoAndDocsDTO"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      },
      "delete": {
        "operationId": "ContractCRUDController_deleteSubcol",
        "summary": "Removes subdoc from subcollection",
        "description": "Deletes subdocument inside contract's subcollection with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      }
    },
    "/api/v1/contract/by/{property}/{value}/{subcolName}/all/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "ContractCRUDController_findAllSubcolBy",
        "summary": "Finds all specific subdocs from subcollection",
        "description": "Return all specific subdocs from contract's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CreateContractProvidedServiceDTO"
                              },
                              {
                                "$ref": "#/components/schemas/CreateProvidedInfoAndDocsDTO"
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      }
    },
    "/api/v1/contract/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "ContractCRUDController_updateSubdoc",
        "summary": "Updates subdocument of contract",
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateContractProvidedServiceDTO"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateProvidedInfoAndDocsDTO"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Contract CRUD"]
      }
    },
    "/api/v1/providable-service": {
      "post": {
        "operationId": "ProvidableServiceCRUDController_create",
        "summary": "Creates a new providableService",
        "description": "Adds a new providableService to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProvidableServiceDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "id": "63383ae40a36136c2301bc5b" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      },
      "get": {
        "operationId": "ProvidableServiceCRUDController_list",
        "summary": "Lists all the providableServices",
        "description": "Returns the whole collection of providableServices",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetProvidableServiceOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      }
    },
    "/api/v1/providable-service/by/{property}/{value}": {
      "get": {
        "operationId": "ProvidableServiceCRUDController_findBy",
        "summary": "Finds one specific providableService",
        "description": "Takes the property and value and returns a providableService document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetProvidableServiceOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      },
      "put": {
        "operationId": "ProvidableServiceCRUDController_update",
        "summary": "Updates the providableService",
        "description": "Updates the existing document inside the providableService collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProvidableServiceDTO"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      },
      "delete": {
        "operationId": "ProvidableServiceCRUDController_delete",
        "summary": "Deletes the providableService",
        "description": "Deletes the existing document from the providableService collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      }
    },
    "/api/v1/providable-service/all/by/{property}/{value}": {
      "get": {
        "operationId": "ProvidableServiceCRUDController_findAll",
        "summary": "Finds all specific providableServices",
        "description": "Takes the property and value and returns multiple providableService documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetProvidableServiceOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      }
    },
    "/api/v1/providable-service/by/{property}/{value}/{subcolName}": {
      "post": {
        "operationId": "ProvidableServiceCRUDController_pushSubcol",
        "summary": "Pushes subdocument to providableService subcollection",
        "deprecated": true,
        "description": "Creates a new subdocument inside providableService's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "dto is not implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "201": {
            "description": "Data, in providableService was updated successfully. No data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      },
      "get": {
        "operationId": "ProvidableServiceCRUDController_listSubcol",
        "summary": "Lists the whole subcollection",
        "deprecated": true,
        "description": "Return all subdocs from providableService's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "array", "items": { "oneOf": [] } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      }
    },
    "/api/v1/providable-service/by/{property}/{value}/{subcolName}/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "ProvidableServiceCRUDController_findSubcolBy",
        "summary": "Finds subdocument in providableService subcollection",
        "deprecated": true,
        "description": "Returns one specific subdocument from providableService's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "object", "oneOf": [] }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      },
      "put": {
        "operationId": "ProvidableServiceCRUDController_updateSubcol",
        "summary": "Updates subdoc inside subcollection",
        "deprecated": true,
        "description": "Updates the existing subdocument from the providableService's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "dto is not implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      },
      "delete": {
        "operationId": "ProvidableServiceCRUDController_deleteSubcol",
        "summary": "Removes subdoc from subcollection",
        "deprecated": true,
        "description": "Deletes subdocument inside providableService's subcollection with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      }
    },
    "/api/v1/providable-service/by/{property}/{value}/{subcolName}/all/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "ProvidableServiceCRUDController_findAllSubcolBy",
        "summary": "Finds all specific subdocs from subcollection",
        "deprecated": true,
        "description": "Return all specific subdocs from providableService's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "array", "items": { "oneOf": [] } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      }
    },
    "/api/v1/providable-service/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "ProvidableServiceCRUDController_updateSubdoc",
        "summary": "Updates subdocument of providableService",
        "deprecated": true,
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "dto is not implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Providable service CRUD"]
      }
    },
    "/api/v1/place": {
      "post": {
        "operationId": "PlaceCRUDController_create",
        "summary": "Creates a new place",
        "description": "Adds a new place to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreatePlaceDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document has been successfully created. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      },
      "get": {
        "operationId": "PlaceCRUDController_list",
        "summary": "Lists all the places",
        "description": "Returns the whole collection of places",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      }
    },
    "/api/v1/place/by/{property}/{value}": {
      "get": {
        "operationId": "PlaceCRUDController_findBy",
        "summary": "Finds one specific place",
        "description": "Takes the property and value and returns a place document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      },
      "put": {
        "operationId": "PlaceCRUDController_update",
        "summary": "Updates the place",
        "description": "Updates the existing document inside the place collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdatePlaceDTO" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      },
      "delete": {
        "operationId": "PlaceCRUDController_delete",
        "summary": "Deletes the place",
        "description": "Deletes the existing document from the place collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      }
    },
    "/api/v1/place/all/by/{property}/{value}": {
      "get": {
        "operationId": "PlaceCRUDController_findAll",
        "summary": "Finds all specific places",
        "description": "Takes the property and value and returns multiple place documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      }
    },
    "/api/v1/place/by/{property}/{value}/{subcolName}": {
      "post": {
        "operationId": "PlaceCRUDController_pushSubcol",
        "summary": "Pushes subdocument to place subcollection",
        "description": "Creates a new subdocument inside place's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "No subcollections implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      },
      "get": {
        "operationId": "PlaceCRUDController_listSubcol",
        "summary": "Lists the whole subcollection",
        "description": "Return all subdocs from place's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      }
    },
    "/api/v1/place/by/{property}/{value}/{subcolName}/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "PlaceCRUDController_findSubcolBy",
        "summary": "Finds subdocument in place subcollection",
        "description": "Returns one specific subdocument from place's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "No subcollections implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      },
      "put": {
        "operationId": "PlaceCRUDController_updateSubcol",
        "summary": "Updates subdoc inside subcollection",
        "description": "Updates the existing subdocument from the place's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      },
      "delete": {
        "operationId": "PlaceCRUDController_deleteSubcol",
        "summary": "Removes subdoc from subcollection",
        "description": "Deletes subdocument inside place's subcollection with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      }
    },
    "/api/v1/place/by/{property}/{value}/{subcolName}/all/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "PlaceCRUDController_findAllSubcolBy",
        "summary": "Finds all specific subdocs from subcollection",
        "description": "Return all specific subdocs from place's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      }
    },
    "/api/v1/place/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "PlaceCRUDController_updateSubdoc",
        "summary": "Updates subdocument of place",
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Place CRUD"]
      }
    },
    "/api/v1/plan": {
      "post": {
        "operationId": "PlanCRUDController_create",
        "summary": "Creates a new plan",
        "description": "Adds a new plan to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreatePlanDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "id": "63383ae40a36136c2301bc5b" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      },
      "get": {
        "operationId": "PlanCRUDController_list",
        "summary": "Lists all the plans",
        "description": "Returns the whole collection of plans",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetPlanOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      }
    },
    "/api/v1/plan/by/{property}/{value}": {
      "get": {
        "operationId": "PlanCRUDController_findBy",
        "summary": "Finds one specific plan",
        "description": "Takes the property and value and returns a plan document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetPlanOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      },
      "put": {
        "operationId": "PlanCRUDController_update",
        "summary": "Updates the plan",
        "description": "Updates the existing document inside the plan collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdatePlanDTO" }
            }
          }
        },
        "responses": {
          "200": { "description": "" },
          "304": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Redirection" },
                        "status": { "type": "number", "example": 304 },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      },
      "delete": {
        "operationId": "PlanCRUDController_delete",
        "summary": "Deletes the plan",
        "description": "Deletes the existing document from the plan collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      }
    },
    "/api/v1/plan/all/by/{property}/{value}": {
      "get": {
        "operationId": "PlanCRUDController_findAll",
        "summary": "Finds all specific plans",
        "description": "Takes the property and value and returns multiple plan documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetPlanOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      }
    },
    "/api/v1/plan/by/{property}/{value}/{subcolName}": {
      "post": {
        "operationId": "PlanCRUDController_pushSubcol",
        "summary": "Pushes subdocument to plan subcollection",
        "description": "Creates a new subdocument inside plan's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/CreateRecommendedPlanDTO" }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Data, in plan was updated successfully. No data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "Either new data is sae as old one or database canceled transaction",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Informational"
                        },
                        "status": { "type": "number", "example": 304 },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      },
      "get": {
        "operationId": "PlanCRUDController_listSubcol",
        "summary": "Lists the whole subcollection",
        "description": "Return all subdocs from plan's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      }
    },
    "/api/v1/plan/by/{property}/{value}/{subcolName}/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "PlanCRUDController_findSubcolBy",
        "summary": "Finds subdocument in plan subcollection",
        "description": "Returns one specific subdocument from plan's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      },
      "put": {
        "operationId": "PlanCRUDController_updateSubcol",
        "summary": "Updates subdoc inside subcollection",
        "description": "Updates the existing subdocument from the plan's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/UpdateRecommendedPlanDTO" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      },
      "delete": {
        "operationId": "PlanCRUDController_deleteSubcol",
        "summary": "Removes subdoc from subcollection",
        "description": "Deletes subdocument inside plan's subcollection with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      }
    },
    "/api/v1/plan/by/{property}/{value}/{subcolName}/all/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "PlanCRUDController_findAllSubcolBy",
        "summary": "Finds all specific subdocs from subcollection",
        "description": "Return all specific subdocs from plan's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CreateRecommendedPlanDTO"
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      }
    },
    "/api/v1/plan/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "PlanCRUDController_updateSubdoc",
        "summary": "Updates subdocument of plan",
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/UpdateRecommendedPlanDTO" }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Plan CRUD"]
      }
    },
    "/api/v1/fox": {
      "post": {
        "operationId": "FoxCRUDController_create",
        "summary": "Creates a new fox",
        "description": "Adds a new fox to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateFoxDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "id": "63383ae40a36136c2301bc5b" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      },
      "get": {
        "operationId": "FoxCRUDController_list",
        "summary": "Lists all the foxs",
        "description": "Returns the whole collection of foxs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetFoxOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      }
    },
    "/api/v1/fox/by/{property}/{value}": {
      "get": {
        "operationId": "FoxCRUDController_findBy",
        "summary": "Finds one specific fox",
        "description": "Takes the property and value and returns a fox document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetFoxOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      },
      "put": {
        "operationId": "FoxCRUDController_update",
        "summary": "Updates the fox",
        "description": "Updates the existing document inside the fox collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateFoxDTO" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Redirection" },
                        "status": { "type": "number", "example": 304 },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      },
      "delete": {
        "operationId": "FoxCRUDController_delete",
        "summary": "Deletes the fox",
        "description": "Deletes the existing document from the fox collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      }
    },
    "/api/v1/fox/all/by/{property}/{value}": {
      "get": {
        "operationId": "FoxCRUDController_findAll",
        "summary": "Finds all specific foxs",
        "description": "Takes the property and value and returns multiple fox documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetFoxOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      }
    },
    "/api/v1/fox/by/{property}/{value}/{subcolName}": {
      "post": {
        "operationId": "FoxCRUDController_pushSubcol",
        "summary": "Pushes subdocument to fox subcollection",
        "description": "Creates a new subdocument inside fox's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/AddAkitaDTO" },
                  { "$ref": "#/components/schemas/AddDirectDeviceDTO" }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Data, in fox was updated successfully. No data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "Either new data is sae as old one or database canceled transaction",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Informational"
                        },
                        "status": { "type": "number", "example": 304 },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      },
      "get": {
        "operationId": "FoxCRUDController_listSubcol",
        "summary": "Lists the whole subcollection",
        "description": "Return all subdocs from fox's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      }
    },
    "/api/v1/fox/by/{property}/{value}/{subcolName}/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "FoxCRUDController_findSubcolBy",
        "summary": "Finds subdocument in fox subcollection",
        "description": "Returns one specific subdocument from fox's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      },
      "put": {
        "operationId": "FoxCRUDController_updateSubcol",
        "summary": "Updates subdoc inside subcollection",
        "description": "Updates the existing subdocument from the fox's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/AddAkitaDTO" },
                  { "$ref": "#/components/schemas/AddDirectDeviceDTO" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      },
      "delete": {
        "operationId": "FoxCRUDController_deleteSubcol",
        "summary": "Removes subdoc from subcollection",
        "description": "Deletes subdocument inside fox's subcollection with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      }
    },
    "/api/v1/fox/by/{property}/{value}/{subcolName}/all/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "FoxCRUDController_findAllSubcolBy",
        "summary": "Finds all specific subdocs from subcollection",
        "description": "Return all specific subdocs from fox's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              { "$ref": "#/components/schemas/undefined" }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      }
    },
    "/api/v1/fox/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "FoxCRUDController_updateSubdoc",
        "summary": "Updates subdocument of fox",
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/AddAkitaDTO" },
                  { "$ref": "#/components/schemas/AddDirectDeviceDTO" }
                ]
              }
            }
          }
        },
        "responses": {
          "204": { "description": "" },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Fox CRUD"]
      }
    },
    "/api/v1/device": {
      "post": {
        "operationId": "DeviceCRUDController_create",
        "summary": "Creates a new device",
        "description": "Adds a new device to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateDeviceDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "id": "63383ae40a36136c2301bc5b" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      },
      "get": {
        "operationId": "DeviceCRUDController_list",
        "summary": "Lists all the devices",
        "description": "Returns the whole collection of devices",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetDeviceOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      }
    },
    "/api/v1/device/by/{property}/{value}": {
      "get": {
        "operationId": "DeviceCRUDController_findBy",
        "summary": "Finds one specific device",
        "description": "Takes the property and value and returns a device document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetDeviceOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      },
      "put": {
        "operationId": "DeviceCRUDController_update",
        "summary": "Updates the device",
        "description": "Updates the existing document inside the device collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateDeviceDTO" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Redirection" },
                        "status": { "type": "number", "example": 304 },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      },
      "delete": {
        "operationId": "DeviceCRUDController_delete",
        "summary": "Deletes the device",
        "description": "Deletes the existing document from the device collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      }
    },
    "/api/v1/device/all/by/{property}/{value}": {
      "get": {
        "operationId": "DeviceCRUDController_findAll",
        "summary": "Finds all specific devices",
        "description": "Takes the property and value and returns multiple device documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetDeviceOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      }
    },
    "/api/v1/device/by/{property}/{value}/{subcolName}": {
      "post": {
        "operationId": "DeviceCRUDController_pushSubcol",
        "summary": "Pushes subdocument to device subcollection",
        "deprecated": true,
        "description": "Creates a new subdocument inside device's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "201": {
            "description": "Data, in device was updated successfully. No data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "Either new data is sae as old one or database canceled transaction",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Informational"
                        },
                        "status": { "type": "number", "example": 304 },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      },
      "get": {
        "operationId": "DeviceCRUDController_listSubcol",
        "summary": "Lists the whole subcollection",
        "deprecated": true,
        "description": "Return all subdocs from device's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      }
    },
    "/api/v1/device/by/{property}/{value}/{subcolName}/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "DeviceCRUDController_findSubcolBy",
        "summary": "Finds subdocument in device subcollection",
        "deprecated": true,
        "description": "Returns one specific subdocument from device's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      },
      "put": {
        "operationId": "DeviceCRUDController_updateSubcol",
        "summary": "Updates subdoc inside subcollection",
        "deprecated": true,
        "description": "Updates the existing subdocument from the device's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      },
      "delete": {
        "operationId": "DeviceCRUDController_deleteSubcol",
        "summary": "Removes subdoc from subcollection",
        "deprecated": true,
        "description": "Deletes subdocument inside device's subcollection with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      }
    },
    "/api/v1/device/by/{property}/{value}/{subcolName}/all/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "DeviceCRUDController_findAllSubcolBy",
        "summary": "Finds all specific subdocs from subcollection",
        "deprecated": true,
        "description": "Return all specific subdocs from device's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              { "$ref": "#/components/schemas/undefined" }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      }
    },
    "/api/v1/device/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "DeviceCRUDController_updateSubdoc",
        "summary": "Updates subdocument of device",
        "deprecated": true,
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "" },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Device CRUD"]
      }
    },
    "/api/v1/akita": {
      "post": {
        "operationId": "AkitaCRUDController_create",
        "summary": "Creates a new akita",
        "description": "Adds a new akita to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateAkitaDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document has been successfully created. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      },
      "get": {
        "operationId": "AkitaCRUDController_list",
        "summary": "Lists all the akitas",
        "description": "Returns the whole collection of akitas",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      }
    },
    "/api/v1/akita/by/{property}/{value}": {
      "get": {
        "operationId": "AkitaCRUDController_findBy",
        "summary": "Finds one specific akita",
        "description": "Takes the property and value and returns a akita document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      },
      "put": {
        "operationId": "AkitaCRUDController_update",
        "summary": "Updates the akita",
        "description": "Updates the existing document inside the akita collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateAkitaDTO" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      },
      "delete": {
        "operationId": "AkitaCRUDController_delete",
        "summary": "Deletes the akita",
        "description": "Deletes the existing document from the akita collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      }
    },
    "/api/v1/akita/all/by/{property}/{value}": {
      "get": {
        "operationId": "AkitaCRUDController_findAll",
        "summary": "Finds all specific akitas",
        "description": "Takes the property and value and returns multiple akita documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      }
    },
    "/api/v1/akita/by/{property}/{value}/{subcolName}": {
      "post": {
        "operationId": "AkitaCRUDController_pushSubcol",
        "summary": "Pushes subdocument to akita subcollection",
        "description": "Creates a new subdocument inside akita's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "No subcollections implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      },
      "get": {
        "operationId": "AkitaCRUDController_listSubcol",
        "summary": "Lists the whole subcollection",
        "description": "Return all subdocs from akita's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      }
    },
    "/api/v1/akita/by/{property}/{value}/{subcolName}/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "AkitaCRUDController_findSubcolBy",
        "summary": "Finds subdocument in akita subcollection",
        "description": "Returns one specific subdocument from akita's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "No subcollections implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      },
      "put": {
        "operationId": "AkitaCRUDController_updateSubcol",
        "summary": "Updates subdoc inside subcollection",
        "description": "Updates the existing subdocument from the akita's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      },
      "delete": {
        "operationId": "AkitaCRUDController_deleteSubcol",
        "summary": "Removes subdoc from subcollection",
        "description": "Deletes subdocument inside akita's subcollection with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      }
    },
    "/api/v1/akita/by/{property}/{value}/{subcolName}/all/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "AkitaCRUDController_findAllSubcolBy",
        "summary": "Finds all specific subdocs from subcollection",
        "description": "Return all specific subdocs from akita's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      }
    },
    "/api/v1/akita/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "AkitaCRUDController_updateSubdoc",
        "summary": "Updates subdocument of akita",
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        },
                        "error": {
                          "type": "string",
                          "example": "Document not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita CRUD"]
      }
    },
    "/api/v1/akita/add-device": {
      "post": {
        "operationId": "AkitaController_addDevice",
        "summary": "Adds a new device to akita",
        "description": "Adds a new device to akita's device list in database",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddDeviceDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request has been successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": {
                          "type": "object",
                          "$ref": "#/components/schemas/undefined"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Akita Logic"]
      }
    },
    "/api/v1/intercom": {
      "post": {
        "operationId": "IntercomCRUDController_create",
        "summary": "Creates a new intercom",
        "description": "Adds a new intercom to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateIntercomDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "id": "63383ae40a36136c2301bc5b" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Intercom CRUD"]
      },
      "get": {
        "operationId": "IntercomCRUDController_list",
        "summary": "Lists all the intercoms",
        "description": "Returns the whole collection of intercoms",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetIntercomOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Intercom CRUD"]
      }
    },
    "/api/v1/intercom/by/{property}/{value}": {
      "get": {
        "operationId": "IntercomCRUDController_findBy",
        "summary": "Finds one specific intercom",
        "description": "Takes the property and value and returns a intercom document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetIntercomOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Intercom CRUD"]
      },
      "put": {
        "operationId": "IntercomCRUDController_update",
        "summary": "Updates the intercom",
        "description": "Updates the existing document inside the intercom collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateIntercomDTO" }
            }
          }
        },
        "responses": {
          "200": { "description": "" },
          "304": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Redirection" },
                        "status": { "type": "number", "example": 304 },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Intercom CRUD"]
      },
      "delete": {
        "operationId": "IntercomCRUDController_delete",
        "summary": "Deletes the intercom",
        "description": "Deletes the existing document from the intercom collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Intercom CRUD"]
      }
    },
    "/api/v1/intercom/all/by/{property}/{value}": {
      "get": {
        "operationId": "IntercomCRUDController_findAll",
        "summary": "Finds all specific intercoms",
        "description": "Takes the property and value and returns multiple intercom documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetIntercomOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Intercom CRUD"]
      }
    },
    "/api/v1/intercom/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "IntercomCRUDController_updateSubdoc",
        "summary": "Updates subdocument of intercom",
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Intercom CRUD"]
      }
    },
    "/api/v1/camera": {
      "post": {
        "operationId": "CameraCRUDController_create",
        "summary": "Creates a new camera",
        "description": "Adds a new camera to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateCameraDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": {
                          "type": "any",
                          "example": { "id": "63383ae40a36136c2301bc5b" }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      },
      "get": {
        "operationId": "CameraCRUDController_list",
        "summary": "Lists all the cameras",
        "description": "Returns the whole collection of cameras",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetCameraOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      }
    },
    "/api/v1/camera/by/{property}/{value}": {
      "get": {
        "operationId": "CameraCRUDController_findBy",
        "summary": "Finds one specific camera",
        "description": "Takes the property and value and returns a camera document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetCameraOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      },
      "put": {
        "operationId": "CameraCRUDController_update",
        "summary": "Updates the camera",
        "description": "Updates the existing document inside the camera collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateCameraDTO" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      },
      "delete": {
        "operationId": "CameraCRUDController_delete",
        "summary": "Deletes the camera",
        "description": "Deletes the existing document from the camera collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      }
    },
    "/api/v1/camera/all/by/{property}/{value}": {
      "get": {
        "operationId": "CameraCRUDController_findAll",
        "summary": "Finds all specific cameras",
        "description": "Takes the property and value and returns multiple camera documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetCameraOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      }
    },
    "/api/v1/camera/by/{property}/{value}/{subcolName}": {
      "post": {
        "operationId": "CameraCRUDController_pushSubcol",
        "summary": "Pushes subdocument to camera subcollection",
        "deprecated": true,
        "description": "Creates a new subdocument inside camera's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "there is no subcollection here - dto is not implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "201": {
            "description": "Data, in camera was updated successfully. No data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      },
      "get": {
        "operationId": "CameraCRUDController_listSubcol",
        "summary": "Lists the whole subcollection",
        "deprecated": true,
        "description": "Return all subdocs from camera's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "array", "items": { "oneOf": [] } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      }
    },
    "/api/v1/camera/by/{property}/{value}/{subcolName}/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "CameraCRUDController_findSubcolBy",
        "summary": "Finds subdocument in camera subcollection",
        "deprecated": true,
        "description": "Returns one specific subdocument from camera's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "object", "oneOf": [] }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      },
      "put": {
        "operationId": "CameraCRUDController_updateSubcol",
        "summary": "Updates subdoc inside subcollection",
        "deprecated": true,
        "description": "Updates the existing subdocument from the camera's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "there is no subcollection here - dto is not implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      },
      "delete": {
        "operationId": "CameraCRUDController_deleteSubcol",
        "summary": "Removes subdoc from subcollection",
        "deprecated": true,
        "description": "Deletes subdocument inside camera's subcollection with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      }
    },
    "/api/v1/camera/by/{property}/{value}/{subcolName}/all/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "CameraCRUDController_findAllSubcolBy",
        "summary": "Finds all specific subdocs from subcollection",
        "deprecated": true,
        "description": "Return all specific subdocs from camera's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": { "type": "array", "items": { "oneOf": [] } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      }
    },
    "/api/v1/camera/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "CameraCRUDController_updateSubdoc",
        "summary": "Updates subdocument of camera",
        "deprecated": true,
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "there is no subcollection here - dto is not implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "204": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 204 },
                        "message": {
                          "type": "string",
                          "example": "No Content"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Camera CRUD"]
      }
    },
    "/api/v1/service": {
      "post": {
        "operationId": "ServiceCRUDController_create",
        "summary": "Creates a new service",
        "description": "Adds a new service to the database and returns it's id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateServiceDTO" }
            }
          }
        },
        "responses": {
          "200": { "description": "" },
          "409": {
            "description": "The document is already exists",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 409 },
                        "message": { "type": "string", "example": "Conflict" },
                        "description": {
                          "type": "string",
                          "example": "The request could not be completed due to a conflict with the current state of the resource. This code is only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit the request. The response body SHOULD include enough information for the user to recognize the source of the conflict. Ideally, the response entity would include enough information for the user or user agent to fix the problem; however, that might not be possible and is not required. Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the entity being PUT included changes to a resource which conflict with those made by an earlier (third-party) request, the server might use the 409 response to indicate that it can't complete the request. In this case, the response entity would likely contain a list of the differences between the two versions in a format defined by the response Content-Type."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Service CRUD"]
      },
      "get": {
        "operationId": "ServiceCRUDController_list",
        "summary": "Lists all the services",
        "description": "Returns the whole collection of services",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetServiceOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": { "description": "" },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Service CRUD"]
      }
    },
    "/api/v1/service/by/{property}/{value}": {
      "get": {
        "operationId": "ServiceCRUDController_findBy",
        "summary": "Finds one specific service",
        "description": "Takes the property and value and returns a service document",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "function",
                          "$ref": "#/components/schemas/GetServiceOutputDTO"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Service CRUD"]
      },
      "put": {
        "operationId": "ServiceCRUDController_update",
        "summary": "Updates the service",
        "description": "Updates the existing document inside the service collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateServiceDTO" }
            }
          }
        },
        "responses": {
          "200": { "description": "" },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Service CRUD"]
      },
      "delete": {
        "operationId": "ServiceCRUDController_delete",
        "summary": "Deletes the service",
        "description": "Deletes the existing document from the service collection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Service CRUD"]
      }
    },
    "/api/v1/service/all/by/{property}/{value}": {
      "get": {
        "operationId": "ServiceCRUDController_findAll",
        "summary": "Finds all specific services",
        "description": "Takes the property and value and returns multiple service documents",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has ben successfully executed. No errors.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 200 },
                        "message": { "type": "string", "example": "OK" },
                        "description": {
                          "type": "string",
                          "example": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action; TRACE an entity containing the request message as received by the end server."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetServiceOutputDTO"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Service CRUD"]
      }
    },
    "/api/v1/service/by/{property}/{value}/{subcolName}": {
      "post": {
        "operationId": "ServiceCRUDController_pushSubcol",
        "summary": "Pushes subdocument to service subcollection",
        "deprecated": true,
        "description": "Creates a new subdocument inside service's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "No subcollections implemented",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "201": {
            "description": "Data, in service was updated successfully. No data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Success" },
                        "status": { "type": "number", "example": 201 },
                        "message": { "type": "string", "example": "Created" },
                        "description": {
                          "type": "string",
                          "example": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "Either new data is sae as old one or database canceled transaction",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Informational"
                        },
                        "status": { "type": "number", "example": 304 },
                        "message": {
                          "type": "string",
                          "example": "Not Modified"
                        },
                        "description": {
                          "type": "string",
                          "example": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. The response MUST include the following header fields: Date, unless its omission is required by section 14.18.1; If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly. ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response for the same variant; If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional. If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Some of the request parameters point to unexisted document in database",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Client Error" },
                        "status": { "type": "number", "example": 404 },
                        "message": { "type": "string", "example": "Not Found" },
                        "description": {
                          "type": "string",
                          "example": "The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error while database modification",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/HttpResponse" },
                    {
                      "properties": {
                        "type": { "type": "string", "example": "Server Error" },
                        "status": { "type": "number", "example": 500 },
                        "message": {
                          "type": "string",
                          "example": "Internal Server Error"
                        },
                        "description": {
                          "type": "string",
                          "example": "The server encountered an unexpected condition which prevented it from fulfilling the request."
                        },
                        "data": { "type": "any", "example": {} }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Service CRUD"]
      },
      "get": {
        "operationId": "ServiceCRUDController_listSubcol",
        "summary": "Lists the whole subcollection",
        "deprecated": true,
        "description": "Return all subdocs from service's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Service CRUD"]
      }
    },
    "/api/v1/service/by/{property}/{value}/{subcolName}/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "ServiceCRUDController_findSubcolBy",
        "summary": "Finds subdocument in service subcollection",
        "deprecated": true,
        "description": "Returns one specific subdocument from service's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Service CRUD"]
      },
      "put": {
        "operationId": "ServiceCRUDController_updateSubcol",
        "summary": "Updates subdocument of service",
        "deprecated": true,
        "description": "Updates subdocument of document with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Service CRUD"]
      },
      "delete": {
        "operationId": "ServiceCRUDController_deleteSubcol",
        "summary": "Removes subdoc from subcollection",
        "deprecated": true,
        "description": "Deletes subdocument inside service's subcollection with defined property name and property value",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Service CRUD"]
      }
    },
    "/api/v1/service/by/{property}/{value}/{subcolName}/all/by/{subcolProperty}/{subcolValue}": {
      "get": {
        "operationId": "ServiceCRUDController_findAllSubcolBy",
        "summary": "Finds all specific subdocs from subcollection",
        "deprecated": true,
        "description": "Return all specific subdocs from service's subcollection filtered by property",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolProperty",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subcolValue",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Service CRUD"]
      }
    },
    "/api/v1/service/by/{property}/{value}/{subdocName}": {
      "put": {
        "operationId": "ServiceCRUDController_updateSubdoc",
        "summary": "Updates subdoc inside subcollection",
        "deprecated": true,
        "description": "Updates the existing subdocument from the service's subcollection",
        "parameters": [
          {
            "name": "property",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "subdocName",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Service CRUD"]
      }
    }
  },

  "tags": [],
  "components": {
    "schemas": {
      "CredentialDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Credential type",
            "example": "password"
          },
          "value": {
            "type": "string",
            "description": "Credential value",
            "example": "12341234"
          },
          "temporary": {
            "type": "boolean",
            "description": "Is credential temporary",
            "example": false
          }
        }
      },
      "GetAccountDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account keycloak id",
            "example": "d7da0803-8c98-4d60-a9ca-b77f584205a0"
          },
          "username": {
            "type": "string",
            "description": "Account's username (if user then phone; if admin then username)",
            "example": "+79603359782"
          },
          "firstName": {
            "type": "string",
            "description": "Account user's first name",
            "example": "Alexander"
          },
          "lastName": {
            "type": "string",
            "description": "Account user's last name",
            "example": "Valisiev"
          },
          "email": {
            "type": "string",
            "description": "Account user's email (optional)",
            "example": "example@comfortel.pro"
          },
          "credentials": {
            "description": "Account's credentials",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CredentialDTO" }
          },
          "realmRoles": {
            "description": "Account user's realm roles",
            "example": ["create-realm", "offline_access"],
            "type": "array",
            "items": { "type": "string" }
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Is email verified",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Is account enabled",
            "example": true
          },
          "createdTimestamp": {
            "description": "Created timestamp",
            "example": true,
            "type": "array",
            "items": { "type": "number" }
          },
          "attributes": {
            "type": "object",
            "description": "Account attributes (dictionary with custom variables)",
            "example": {
              "next_try_timestamp": 1664626824908,
              "otp_expiration_timestamp": 1664630364908,
              "session_data": "18577354b1e966872e91922ae428997d9414a475ef28594b44f50eeafc6ac3e7",
              "subscription_method": "by_phone_number"
            }
          },
          "clientRoles": {
            "type": "object",
            "description": "Account's client roles (dictionary with arrays of roles)",
            "example": {
              "comfortech": ["admin", "user"],
              "account": ["view-profile", "manage-accounts"],
              "master-reealm": ["view-users"]
            }
          }
        }
      },
      "HttpResponse": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "status": { "type": "number" },
          "message": { "type": "string" },
          "description": { "type": "string" },
          "data": { "type": "object" }
        },
        "required": ["type", "status", "message", "description", "data"]
      },
      "CreateAccountDTO": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Account's username (if user then phone; if admin then username)",
            "example": "+79603359782"
          },
          "firstName": {
            "type": "string",
            "description": "Account user's first name",
            "example": "Alexander"
          },
          "lastName": {
            "type": "string",
            "description": "Account user's last name",
            "example": "Valisiev"
          },
          "email": {
            "type": "string",
            "description": "Account user's email (optional)",
            "example": "example@comfortel.pro"
          },
          "credentials": {
            "description": "Account's credentials",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CredentialDTO" }
          },
          "realmRoles": {
            "description": "Account user's realm roles",
            "example": ["create-realm", "offline_access"],
            "type": "array",
            "items": { "type": "string" }
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Is email verified",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Is account enabled",
            "example": true
          },
          "createdTimestamp": {
            "description": "Created timestamp",
            "example": true,
            "type": "array",
            "items": { "type": "number" }
          },
          "attributes": {
            "type": "object",
            "description": "Account attributes (dictionary with custom variables)",
            "example": {
              "next_try_timestamp": 1664626824908,
              "otp_expiration_timestamp": 1664630364908,
              "session_data": "18577354b1e966872e91922ae428997d9414a475ef28594b44f50eeafc6ac3e7",
              "subscription_method": "by_phone_number"
            }
          },
          "clientRoles": {
            "type": "object",
            "description": "Account's client roles (dictionary with arrays of roles)",
            "example": {
              "comfortech": ["admin", "user"],
              "account": ["view-profile", "manage-accounts"],
              "master-reealm": ["view-users"]
            }
          }
        }
      },
      "UpdateAccountDTO": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Account's username (if user then phone; if admin then username)",
            "example": "+79603359782"
          },
          "firstName": {
            "type": "string",
            "description": "Account user's first name",
            "example": "Alexander"
          },
          "lastName": {
            "type": "string",
            "description": "Account user's last name",
            "example": "Valisiev"
          },
          "email": {
            "type": "string",
            "description": "Account user's email (optional)",
            "example": "example@comfortel.pro"
          },
          "credentials": {
            "description": "Account's credentials",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CredentialDTO" }
          },
          "realmRoles": {
            "description": "Account user's realm roles",
            "example": ["create-realm", "offline_access"],
            "type": "array",
            "items": { "type": "string" }
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Is email verified",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Is account enabled",
            "example": true
          },
          "createdTimestamp": {
            "description": "Created timestamp",
            "example": true,
            "type": "array",
            "items": { "type": "number" }
          },
          "attributes": {
            "type": "object",
            "description": "Account attributes (dictionary with custom variables)",
            "example": {
              "next_try_timestamp": 1664626824908,
              "otp_expiration_timestamp": 1664630364908,
              "session_data": "18577354b1e966872e91922ae428997d9414a475ef28594b44f50eeafc6ac3e7",
              "subscription_method": "by_phone_number"
            }
          },
          "clientRoles": {
            "type": "object",
            "description": "Account's client roles (dictionary with arrays of roles)",
            "example": {
              "comfortech": ["admin", "user"],
              "account": ["view-profile", "manage-accounts"],
              "master-reealm": ["view-users"]
            }
          },
          "id": { "type": "string" }
        },
        "required": ["id"]
      },
      "ServiceSettingsDTO": {
        "type": "object",
        "properties": {
          "service_id": {
            "type": "string",
            "description": "MongoId (_id in service collection)",
            "example": "63383ae40a36136c2301bc5b"
          },
          "is_muted": {
            "type": "boolean",
            "description": "Are push notifications muted for this service",
            "example": true
          }
        }
      },
      "NotificationDTO": {
        "type": "object",
        "properties": {
          "do_not_disturb": {
            "type": "boolean",
            "description": "'Do not disturb' mode",
            "example": true
          },
          "services": {
            "description": "Service settings",
            "allOf": [{ "$ref": "#/components/schemas/ServiceSettingsDTO" }]
          }
        }
      },
      "PlatformDTO": {
        "type": "object",
        "properties": {
          "platform": {
            "type": "string",
            "description": "User's platform",
            "example": "Linux; Android 9; Redmi Note 7"
          },
          "light_mode": {
            "type": "boolean",
            "description": "Is light mode enabled",
            "example": false
          },
          "dark_mode": {
            "type": "boolean",
            "description": "Is dark mode enabled",
            "example": true
          }
        }
      },
      "ApperianceDTO": {
        "type": "object",
        "properties": {
          "platforms": {
            "description": "Platforms list (phone #1, phone #2...)",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PlatformDTO" }
          }
        }
      },
      "SettingsDTO": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "User's language",
            "example": "ru_RU"
          },
          "notification": {
            "description": "User's notification settings",
            "allOf": [{ "$ref": "#/components/schemas/NotificationDTO" }]
          },
          "apperiance": {
            "description": "User's apperiance settings",
            "allOf": [{ "$ref": "#/components/schemas/ApperianceDTO" }]
          },
          "widgets": {
            "type": "object",
            "description": "User's widgets",
            "example": {}
          }
        }
      },
      "SendEmailMessageDTO": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "To whom to send email",
            "example": "example@dipal.ru"
          },
          "from": {
            "type": "string",
            "description": "Who to send email from",
            "example": "Dipal"
          },
          "subject": {
            "type": "string",
            "description": "Email message subject",
            "example": "We have a new release: alpha v0.00001"
          },
          "cc": {
            "description": "Email message carbon copies",
            "example": ["sviat@dipal.ru", "cawa@dipal.ru"],
            "type": "array",
            "items": { "type": "string" }
          },
          "bcc": {
            "description": "Email message subject",
            "example": ["moeid@dipal.ru", "dell@dipal.ru"],
            "type": "array",
            "items": { "type": "string" }
          },
          "content": {
            "type": "string",
            "description": "Email message content",
            "example": "Hello, username! We have a new version of our app! Best wishes!"
          },
          "attachments": {
            "description": "Email message attachments",
            "example": [],
            "type": "array",
            "items": { "type": "object" }
          }
        },
        "required": ["to", "subject", "content"]
      },
      "PushDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Push notification title",
            "example": "Dipal"
          },
          "body": {
            "type": "string",
            "description": "Push notification body",
            "example": "Motion detected: toilet #2"
          },
          "imageUrl": {
            "type": "string",
            "description": "Push notification image URL",
            "example": "https://ssl.gstatic.com/ui/v1/icons/mail/rfr/logo_gmail_lockup_dark_1x_r5.png"
          }
        }
      },
      "SendNotificationDTO": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "User's account id",
            "example": "54272aee-5b0e-43d8-9256-2799cd323e22"
          },
          "registration_token": {
            "type": "string",
            "description": "Firebase registration token",
            "example": "etx_fpp9Tj2N-XuyGuyC1Z:APA91bGuOdvdqbQFg1Kbcb89sIH3Mqkq65CQ-QxAUxWbu9ixebopVsWxLizBNeAo4JeNqN7dvzAuEOF5VLurx6kcs3MGbM-BzKaQ6qbg8UYBkIlyxk2iu_m5ojHXI4SZ2YiQwKMYi66Y"
          },
          "data": {
            "type": "object",
            "description": "Message payload",
            "example": {
              "type": "motion_sensor",
              "body": { "illuminance": 0.4555555, "timestamp": 1664894339 }
            }
          },
          "push": {
            "description": "Message payload",
            "allOf": [{ "$ref": "#/components/schemas/PushDTO" }]
          }
        }
      },
      "SendSmsMessageDTO": {
        "type": "object",
        "properties": {
          "to": {
            "description": "SMS receivers",
            "example": ["+79502276672", "+79516519741"],
            "type": "array",
            "items": { "type": "string" }
          },
          "from": {
            "type": "string",
            "description": "SMS sender",
            "example": "Dipal"
          },
          "content": {
            "type": "string",
            "description": "SMS sender",
            "example": "Service 'Smart Toilet' is connected to your account"
          }
        },
        "required": ["to", "from", "content"]
      },
      "ActivityNoteDTO": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Url path to API that was called",
            "example": "/api/v1/notifications/send-sms"
          },
          "method": {
            "type": "string",
            "description": "HTTP method (GET, POST, ...)",
            "example": "POST"
          },
          "status_code": {
            "type": "number",
            "description": "Status code for called API",
            "example": 500
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp when the API was called (according server time)",
            "example": 1664985687
          },
          "body": {
            "type": "string",
            "description": "Request body of called API",
            "example": {
              "to": ["+79502276672", "+79516519741"],
              "from": "Dipal",
              "content": "Service 'Smart Toilet' is connected to your account"
            }
          }
        },
        "required": ["path", "method", "status_code", "timestamp"]
      },
      "RoleRepresentationDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Role keycloak id",
            "example": "7cf3b1a5-4f9d-4dc5-a9e2-633caebb85c6"
          },
          "name": {
            "type": "string",
            "description": "Role name",
            "example": "user"
          },
          "composite": {
            "type": "boolean",
            "description": "Is role composite",
            "example": true
          },
          "clientRole": {
            "type": "string",
            "description": "Role name",
            "example": "user"
          },
          "containerId": {
            "type": "string",
            "description": "Client id of role",
            "example": "7ddc63cf-8d4b-4fb6-970f-58dedd4bdae0"
          },
          "description": {
            "type": "string",
            "description": "Short description about role",
            "example": "Simple user who have access only to Pyrador and Iguana"
          }
        }
      },
      "CreateRoleDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Role name",
            "example": "user"
          },
          "composite": {
            "type": "boolean",
            "description": "Is role composite",
            "example": true
          },
          "clientRole": {
            "type": "string",
            "description": "Role name",
            "example": "user"
          },
          "containerId": {
            "type": "string",
            "description": "Client id of role",
            "example": "7ddc63cf-8d4b-4fb6-970f-58dedd4bdae0"
          },
          "description": {
            "type": "string",
            "description": "Short description about role",
            "example": "Simple user who have access only to Pyrador and Iguana"
          }
        },
        "required": ["name"]
      },
      "GetServiceNecessaryInfoOutputDTO": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "Name of the field",
            "example": "new_field_name"
          },
          "is_mandatory": {
            "type": "boolean",
            "description": "Is the field mandatory",
            "example": false
          }
        }
      },
      "GetServiceSettingsOutputDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the setting",
            "example": "Number of cameras"
          },
          "type": {
            "type": "string",
            "description": "The type of the setting (number, string, ...)",
            "example": "number"
          },
          "default_value": {
            "type": "any",
            "description": "The default value for the setting",
            "example": 1
          }
        }
      },
      "GetBaseServiceOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Mongo Id of the Base Service",
            "example": "1209f911098ccab192"
          },
          "name": {
            "type": "string",
            "description": "Custom name of the base service",
            "example": "camera base service"
          },
          "type": {
            "type": "string",
            "description": "Type of the base service (intercom, video security, internet, ...)",
            "example": "camera"
          },
          "activated": {
            "type": "boolean",
            "description": "Is base service activated (true | false)",
            "example": true
          },
          "necessary_info": {
            "description": "Required information about service",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetServiceNecessaryInfoOutputDTO"
            }
          },
          "settings": {
            "description": "Settings of the service",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetServiceSettingsOutputDTO"
            }
          }
        },
        "required": ["id"]
      },
      "CreateServiceNecessaryInfoDTO": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "Name of the field",
            "example": "new_field_name"
          },
          "is_mandatory": {
            "type": "boolean",
            "description": "Is the field mandatory",
            "example": false
          }
        },
        "required": ["field_name", "is_mandatory"]
      },
      "CreateServiceSettingsDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the setting",
            "example": "Number of cameras"
          },
          "type": {
            "type": "string",
            "description": "The type of the setting (number, string, ...)",
            "example": "number"
          },
          "default_value": {
            "type": "any",
            "description": "The default value for the setting",
            "example": 1
          }
        },
        "required": ["title", "type", "default_value"]
      },
      "CreateBaseServiceDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Custom name of the base service",
            "example": "camera base service"
          },
          "type": {
            "type": "string",
            "description": "Type of the base service (intercom, video security, internet, ...)",
            "example": "camera"
          },
          "activated": {
            "type": "boolean",
            "description": "Is base service activated (true | false)",
            "example": true
          },
          "necessary_info": {
            "description": "Required information about service",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateServiceNecessaryInfoDTO"
            }
          },
          "settings": {
            "description": "Settings of the service",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CreateServiceSettingsDTO" }
          }
        },
        "required": ["type", "activated", "necessary_info", "settings"]
      },
      "UpdateServiceNecessaryInfoDTO": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "Name of the field",
            "example": "new_field_name"
          },
          "is_mandatory": {
            "type": "boolean",
            "description": "Is the field mandatory",
            "example": false
          }
        }
      },
      "UpdateServiceSettingsDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the setting",
            "example": "Number of cameras"
          },
          "type": {
            "type": "string",
            "description": "The type of the setting (number, string, ...)",
            "example": "number"
          },
          "default_value": {
            "type": "any",
            "description": "The default value for the setting",
            "example": 1
          }
        }
      },
      "UpdateBaseServiceDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Custom name of the base service",
            "example": "camera base service"
          },
          "type": {
            "type": "string",
            "description": "Type of the base service (intercom, video security, internet, ...)",
            "example": "camera"
          },
          "activated": {
            "type": "boolean",
            "description": "Is base service activated (true | false)",
            "example": true
          },
          "necessary_info": {
            "description": "Required information about service",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateServiceNecessaryInfoDTO"
            }
          },
          "settings": {
            "description": "Settings of the service",
            "type": "array",
            "items": { "$ref": "#/components/schemas/UpdateServiceSettingsDTO" }
          }
        }
      },
      "CounterPartDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Another company or user who uses provided service",
            "example": "yandex"
          }
        },
        "required": ["id"]
      },
      "DateAndTime": { "type": "object", "properties": {} },
      "AutoPaymentDTO": {
        "type": "object",
        "properties": {
          "activated": {
            "type": "boolean",
            "description": "Is auto-payment activated",
            "example": true
          },
          "next_payment": {
            "description": "Timestamp (number)",
            "example": 1607410465663,
            "allOf": [{ "$ref": "#/components/schemas/DateAndTime" }]
          }
        },
        "required": ["activated", "next_payment"]
      },
      "CreateContractProvidedServiceDTO": {
        "type": "object",
        "properties": {
          "service_id": {
            "type": "object",
            "description": "MongoId from one of providable_services",
            "example": "61e51d04d10fcc0a53b8cbd2"
          },
          "places": {
            "description": "Array of MongoIds of user-places",
            "example": ["61e51d04d10fcc0a53b8cbd2"],
            "type": "array",
            "items": { "type": "object" }
          },
          "current_plan_id": {
            "type": "object",
            "description": "MongoId of a current plan",
            "example": "61e51d0ed10fcc0a53b8cbed"
          },
          "auto_payment": {
            "description": "Info about auto-payment {activated, next_payment}",
            "allOf": [{ "$ref": "#/components/schemas/AutoPaymentDTO" }]
          },
          "service_status": {
            "type": "string",
            "enum": [
              "ordered",
              "reviewing",
              "confirmed",
              "activating",
              "activated",
              "to_be_paid",
              "suspended",
              "payment_pending"
            ]
          }
        }
      },
      "CreateProvidedInfoAndDocsDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object",
            "description": "Type of the provided info ",
            "example": "Document"
          },
          "format": {
            "type": "object",
            "description": "the file format ",
            "example": "jpeg"
          },
          "content": {
            "type": "object",
            "description": "?minio link to the resource?",
            "example": "http://minio.techpal.ru/ouy25vk3fjc"
          }
        }
      },
      "CreateContractDTO": {
        "type": "object",
        "properties": {
          "source_company_id": {
            "type": "string",
            "description": "Not unique name of company that provides services",
            "example": "comfortel"
          },
          "counter_part": {
            "description": "Another company or user who uses provided service",
            "example": { "id": "yandex" },
            "allOf": [{ "$ref": "#/components/schemas/CounterPartDTO" }]
          },
          "provided_services": {
            "description": "List of services provided with contract",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateContractProvidedServiceDTO"
            }
          },
          "contract_status": {
            "enum": ["active", "expired"],
            "type": "string",
            "description": "Contract status",
            "example": "active"
          },
          "contract_start": {
            "description": "Datetime timestamp (number) of contract start",
            "example": 1607110465663,
            "allOf": [{ "$ref": "#/components/schemas/DateAndTime" }]
          },
          "contract_end": {
            "description": "Datetime timestamp (number) of contract end",
            "example": 1607110765663,
            "allOf": [{ "$ref": "#/components/schemas/DateAndTime" }]
          },
          "contract_content": {
            "type": "object",
            "description": "Contract content (just plain text)",
            "example": "This is the contract content"
          },
          "provided_info_and_docs": {
            "description": "Provided info and docs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateProvidedInfoAndDocsDTO"
            }
          }
        },
        "required": ["source_company_id", "counter_part"]
      },
      "GetContractProvidedServiceOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of provided service",
            "example": "6318c5e5842a1b7cf4282195"
          },
          "service_status": {
            "enum": [
              "ordered",
              "reviewing",
              "confirmed",
              "activating",
              "activated",
              "to_be_paid",
              "suspended",
              "payment_pending"
            ],
            "type": "string",
            "description": "Service status",
            "example": "activated"
          },
          "service_id": {
            "type": "string",
            "description": "Id of service provided by company",
            "example": "6318c5e5842a1b7cf4282195"
          },
          "places": {
            "type": "string",
            "description": "List of places where service is provided",
            "example": ["61e51d04d10fcc0a53b8cbd2"]
          },
          "current_plan_id": {
            "type": "string",
            "description": "Id of current plan",
            "example": "6318c5e5842a1b7cf4282195"
          },
          "auto_payment": { "$ref": "#/components/schemas/AutoPaymentDTO" }
        }
      },
      "GetProvidedInfoAndDocsOutputDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Document type",
            "example": "image"
          },
          "format": {
            "type": "string",
            "description": "Document format",
            "example": "png"
          },
          "content": {
            "type": "string",
            "description": "Document content",
            "example": "This is very important document"
          }
        }
      },
      "GetContractOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the contract",
            "example": "6318c5e5842a1b7cf4282194"
          },
          "source_company_id": {
            "type": "string",
            "description": "Source company name",
            "example": "Skynet"
          },
          "counter_part": {
            "type": "string",
            "description": "Counterpart company name",
            "example": "yandex"
          },
          "contract_status": {
            "enum": ["active", "expired"],
            "type": "string",
            "description": "Contract status",
            "example": "active"
          },
          "contract_start": {
            "description": "Date and time of contract start",
            "example": "",
            "allOf": [{ "$ref": "#/components/schemas/DateAndTime" }]
          },
          "contract_end": {
            "description": "Date and time of contract end",
            "example": "",
            "allOf": [{ "$ref": "#/components/schemas/DateAndTime" }]
          },
          "contract_content": {
            "type": "string",
            "description": "Contract content",
            "example": "Lorem ipsum dolor sit amet."
          },
          "provided_services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetContractProvidedServiceOutputDTO"
            }
          },
          "provided_info_and_docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetProvidedInfoAndDocsOutputDTO"
            }
          }
        },
        "required": ["id"]
      },
      "UpdateContractProvidedServiceDTO": {
        "type": "object",
        "properties": {
          "service_id": {
            "type": "object",
            "description": "MongoId from one of providable_services",
            "example": "61e51d04d10fcc0a53b8cbd2"
          },
          "places": {
            "description": "Array of MongoIds of user-places",
            "example": ["61e51d04d10fcc0a53b8cbd2"],
            "type": "array",
            "items": { "type": "object" }
          },
          "current_plan_id": {
            "type": "object",
            "description": "MongoId of a current plan",
            "example": "61e51d0ed10fcc0a53b8cbed"
          },
          "auto_payment": {
            "description": "Info about auto-payment {activated, next_payment}",
            "allOf": [{ "$ref": "#/components/schemas/AutoPaymentDTO" }]
          },
          "service_status": { "type": "object" }
        }
      },
      "UpdateProvidedInfoAndDocsDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object",
            "description": "Type of the provided info ",
            "example": "Document"
          },
          "format": {
            "type": "object",
            "description": "the file format ",
            "example": "jpeg"
          },
          "content": {
            "type": "object",
            "description": "?minio link to the resource?",
            "example": "http://minio.techpal.ru/ouy25vk3fjc"
          }
        }
      },
      "UpdateContractDTO": {
        "type": "object",
        "properties": {
          "source_company_id": { "type": "object" },
          "counter_part": { "$ref": "#/components/schemas/CounterPartDTO" },
          "provided_services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateContractProvidedServiceDTO"
            }
          },
          "contract_status": {
            "type": "string",
            "enum": ["active", "expired"]
          },
          "contract_start": { "$ref": "#/components/schemas/DateAndTime" },
          "contract_end": { "$ref": "#/components/schemas/DateAndTime" },
          "contract_content": { "type": "object" },
          "provided_info_and_docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateProvidedInfoAndDocsDTO"
            }
          }
        },
        "required": ["source_company_id", "counter_part"]
      },
      "GetProvidableServiceOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "MongoId of providable service",
            "example": "72bff2a80016d10e"
          },
          "title": {
            "type": "String",
            "description": "Title of providable service",
            "example": "Internet"
          },
          "company_id": {
            "type": "string",
            "description": "Company identifier",
            "example": "confortel"
          },
          "base_contract_id": {
            "type": "string",
            "description": "Base contract id (mongo)",
            "example": "72bff2a80016d10e"
          },
          "thumbnail": {
            "type": "object",
            "description": "Icon of service",
            "example": { "dto": "not implemented" }
          },
          "supported_places": {
            "description": " List of supported places",
            "example": [
              "72bff2a80016d10e",
              "72bff2a80016d10f",
              "72bff2a80016d110"
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "services": {
            "description": "List of services (mongo ids)",
            "example": [
              "72bff2a80016d11e",
              "72bff2a80016d11f",
              "72bff2a80016d120"
            ],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["id"]
      },
      "CreateProvidableServiceDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "String",
            "description": "Title of providable service",
            "example": "Internet"
          },
          "company_id": {
            "type": "string",
            "description": "Company identifier",
            "example": "confortel"
          },
          "base_contract_id": {
            "type": "string",
            "description": "Base contract id (mongo)",
            "example": "72bff2a80016d10e"
          },
          "thumbnail": {
            "type": "object",
            "description": "Icon of service",
            "example": { "dto": "not implemented" }
          },
          "supported_places": {
            "description": "List of supported places",
            "example": [
              "72bff2a80016d10e",
              "72bff2a80016d10f",
              "72bff2a80016d110"
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "services": {
            "description": "List of services (mongo ids)",
            "example": [
              "72bff2a80016d11e",
              "72bff2a80016d11f",
              "72bff2a80016d120"
            ],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["title", "company_id"]
      },
      "GetProvidableServiceInputDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Mongoid of providable service",
            "example": "72bff2a80016d10e"
          },
          "title": {
            "type": "String",
            "description": "Title of providable service",
            "example": "Internet"
          },
          "company_id": {
            "type": "string",
            "description": "Company identifier",
            "example": "confortel"
          },
          "base_contract_id": {
            "type": "string",
            "description": "Base contract id (mongo)",
            "example": "72bff2a80016d10e"
          },
          "thumbnail": {
            "type": "object",
            "description": "Icon of service",
            "example": { "dto": "not implemented" }
          },
          "supported_places": {
            "description": " List of supported places",
            "example": [
              "72bff2a80016d10e",
              "72bff2a80016d10f",
              "72bff2a80016d110"
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "services": {
            "description": "List of services (mongo ids)",
            "example": [
              "72bff2a80016d11e",
              "72bff2a80016d11f",
              "72bff2a80016d120"
            ],
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "UpdateProvidableServiceDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "String",
            "description": "Title of providable service",
            "example": "Internet"
          },
          "company_id": {
            "type": "string",
            "description": "Company identifier",
            "example": "confortel"
          },
          "base_contract_id": {
            "type": "string",
            "description": "Base contract id (mongo)",
            "example": "72bff2a80016d10e"
          },
          "thumbnail": {
            "type": "object",
            "description": "Icon of service",
            "example": { "dto": "not implemented" }
          },
          "supported_places": {
            "description": " List of supported places",
            "example": [
              "72bff2a80016d10e",
              "72bff2a80016d10f",
              "72bff2a80016d110"
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "services": {
            "description": "List of services (mongo ids)",
            "example": [
              "72bff2a80016d11e",
              "72bff2a80016d11f",
              "72bff2a80016d120"
            ],
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "CreatePlaceDTO": {
        "type": "object",
        "properties": {
          "place_type": {
            "type": "string",
            "description": "Place's type (country, city, building, ...)",
            "example": "room"
          },
          "place_subtype": {
            "type": "string",
            "description": "Place's subtype (hall, dinning room, , ...)",
            "example": "my beautiful room"
          },
          "name": {
            "type": "string",
            "description": "Place name",
            "example": "toilet"
          },
          "parent_id": {
            "type": "string",
            "description": "Place parent id (mongo id)",
            "example": "62d546e7ea30636cd5a7e543"
          },
          "address": {
            "type": "string",
            "description": "Place address",
            "example": "St. Petersburg Krasnoselskoe highway, 1k3, apt. 120"
          },
          "postal_code": {
            "type": "string",
            "description": "Place postal code",
            "example": "188507"
          }
        },
        "required": ["place_type"]
      },
      "UpdatePlaceDTO": {
        "type": "object",
        "properties": {
          "place_type": {
            "type": "string",
            "description": "Place's type (country, city, building, ...)",
            "example": "room"
          },
          "place_subtype": {
            "type": "string",
            "description": "Place's subtype (hall, dinning room, , ...)",
            "example": "my beautiful room"
          },
          "name": {
            "type": "string",
            "description": "Place name",
            "example": "toilet"
          },
          "parent_id": {
            "type": "string",
            "description": "Place parent id (mongo id)",
            "example": "62d546e7ea30636cd5a7e543"
          },
          "address": {
            "type": "string",
            "description": "Place address",
            "example": "St. Petersburg Krasnoselskoe highway, 1k3, apt. 120"
          },
          "postal_code": {
            "type": "string",
            "description": "Place postal code",
            "example": "188507"
          }
        },
        "required": ["place_type"]
      },
      "RecommendedPlanDTO": {
        "type": "object",
        "properties": {
          "recommended_period": {
            "enum": [
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "quarterly",
              "annually"
            ],
            "type": "string",
            "description": "Recommended period for payment (hourly, dayly, weekly, ,,,) ",
            "example": "annualy"
          },
          "price_for_each_period": {
            "type": "number",
            "description": "Price for each period for this plan",
            "example": "1000"
          },
          "discount": {
            "type": "number",
            "description": "Discound for this plan",
            "example": 0.1
          },
          "total_price": {
            "type": "number",
            "description": "Total price",
            "example": 900
          }
        }
      },
      "CreatePlanDTO": {
        "type": "object",
        "properties": {
          "service_id": {
            "type": "string",
            "description": "Service id",
            "example": "71bcf17ac30aa51c61"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Best plan ever"
          },
          "period_interval": {
            "enum": [
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "quarterly",
              "annually"
            ],
            "type": "string",
            "description": "Period interval",
            "example": "monthly"
          },
          "does_support_automatic_payment": {
            "type": "boolean",
            "description": "Does support automatic payment",
            "example": true
          },
          "price_for_each_period": {
            "type": "number",
            "description": "Price for each period",
            "example": "1000"
          },
          "discount": {
            "type": "number",
            "description": "Discount",
            "example": "0.1"
          },
          "recommends": {
            "description": "Recommends",
            "type": "array",
            "items": { "$ref": "#/components/schemas/RecommendedPlanDTO" }
          }
        },
        "required": [
          "service_id",
          "title",
          "period_interval",
          "does_support_automatic_payment",
          "price_for_each_period",
          "discount"
        ]
      },
      "GetPlanOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Mongo id of the plan",
            "example": "71bcf17ac30aac61cc"
          },
          "service_id": {
            "type": "string",
            "description": "Service id",
            "example": "71bcf17ac30aa51c61"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Best plan ever"
          },
          "period_interval": {
            "enum": [
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "quarterly",
              "annually"
            ],
            "type": "string",
            "description": "Period interval",
            "example": "monthly"
          },
          "does_support_automatic_payment": {
            "type": "boolean",
            "description": "Does support automatic payment",
            "example": true
          },
          "price_for_each_period": {
            "type": "number",
            "description": "Price for each period",
            "example": "1000"
          },
          "discount": {
            "type": "number",
            "description": "Discount",
            "example": "0.1"
          },
          "recommends": {
            "description": "Recommends",
            "type": "array",
            "items": { "$ref": "#/components/schemas/RecommendedPlanDTO" }
          }
        }
      },
      "UpdateRecommendedPlanDTO": {
        "type": "object",
        "properties": {
          "recommended_period": {
            "enum": [
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "quarterly",
              "annually"
            ],
            "type": "string",
            "description": "Recommended period for payment (hourly, dayly, weekly, ,,,) ",
            "example": "annualy"
          },
          "price_for_each_period": {
            "type": "number",
            "description": "Price for each period for this plan",
            "example": 1000
          },
          "discount": {
            "type": "number",
            "description": "Discound for this plan",
            "example": 0.1
          },
          "total_price": {
            "type": "number",
            "description": "Total price",
            "example": 900
          }
        }
      },
      "UpdatePlanDTO": {
        "type": "object",
        "properties": {
          "service_id": {
            "type": "string",
            "description": "Service id",
            "example": "71bcf17ac30aa51c61"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "example": "Best plan ever"
          },
          "period_interval": {
            "enum": [
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "quarterly",
              "annually"
            ],
            "type": "string",
            "description": "Period interval",
            "example": "monthly"
          },
          "does_support_automatic_payment": {
            "type": "boolean",
            "description": "Does support automatic payment",
            "example": true
          },
          "price_for_each_period": {
            "type": "number",
            "description": "Price for each period",
            "example": "1000"
          },
          "discount": {
            "type": "number",
            "description": "Discount",
            "example": "0.1"
          },
          "recommends": {
            "description": "Recommends",
            "type": "array",
            "items": { "$ref": "#/components/schemas/UpdateRecommendedPlanDTO" }
          }
        }
      },
      "CreateRecommendedPlanDTO": {
        "type": "object",
        "properties": {
          "recommended_period": {
            "enum": [
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "quarterly",
              "annually"
            ],
            "type": "string",
            "description": "Recommended period for payment (hourly, dayly, weekly, ,,,) ",
            "example": "annualy"
          },
          "price_for_each_period": {
            "type": "number",
            "description": "Price for each period for this plan",
            "example": 1000
          },
          "discount": {
            "type": "number",
            "description": "Discound for this plan",
            "example": 0.1
          },
          "total_price": {
            "type": "number",
            "description": "Total price",
            "example": 900
          }
        }
      },
      "AddDirectDeviceDTO": {
        "type": "object",
        "properties": {
          "direct_device_id": {
            "type": "string",
            "description": "Direct device id",
            "example": "62ec000e6d4a9afe0b3bb616"
          },
          "device_type": {
            "enum": ["intercom", "camera"],
            "type": "string",
            "description": "Type of device",
            "example": "intercom"
          }
        }
      },
      "AddAkitaDTO": {
        "type": "object",
        "properties": {
          "akita_id": {
            "type": "string",
            "description": "Direct akita id",
            "example": "61e51d05a4864953ba406af3"
          }
        }
      },
      "CreateFoxDTO": {
        "type": "object",
        "properties": {
          "place_id": {
            "type": "string",
            "description": "Place id (mongo id)",
            "example": "61e51d05a4864953ba406af3"
          },
          "current_ip": {
            "type": "string",
            "description": "Current ip",
            "example": "12.12.11.10"
          },
          "mac_address": {
            "type": "string",
            "description": "MAC address",
            "example": "00:26:57:00:1f:02"
          },
          "configuration": {
            "type": "object",
            "description": "Configuration",
            "example": { "key1": "value1", "key2": "value2" }
          },
          "direct_devices": {
            "description": "Direct devices",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddDirectDeviceDTO" }
          },
          "status": {
            "type": "string",
            "description": "Status",
            "example": "active"
          },
          "connected_akitas": {
            "description": "Connected akitas (mongo ids)",
            "example": ["61e51d05a4864953ba406af3"],
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddAkitaDTO" }
          },
          "reference_number": {
            "type": "string",
            "description": "Reference number",
            "example": "1024"
          },
          "fawn_port": {
            "type": "number",
            "description": "Fawn port",
            "example": 5000
          }
        },
        "required": ["place_id", "current_ip", "mac_address"]
      },
      "GetConnectedAkitaOutputDTO": {
        "type": "object",
        "properties": {
          "akita_id": {
            "type": "string",
            "description": "Direct akita id",
            "example": "61e51d05a4864953ba406af3"
          }
        }
      },
      "GetDirectDeviceOutputDTO": {
        "type": "object",
        "properties": {
          "direct_device_id": {
            "type": "string",
            "description": "Direct device id",
            "example": "62ec000e6d4a9afe0b3bb616"
          },
          "device_type": {
            "enum": ["intercom", "camera"],
            "type": "string",
            "description": "Type of device",
            "example": "intercom"
          }
        }
      },
      "GetFoxOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Mongo id of the fox",
            "example": "61e51d05d10fcc0a53b8cbda"
          },
          "connected_akitas": {
            "description": "Connected akitas (mongo ids)",
            "example": ["61e51d05a4864953ba406af3"],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetConnectedAkitaOutputDTO"
            }
          },
          "reference_number": {
            "type": "string",
            "description": "Reference number",
            "example": "1024"
          },
          "fawn_port": {
            "type": "number",
            "description": "Fawn port",
            "example": 5000
          },
          "place_id": {
            "type": "string",
            "description": "Place id (mongo id)",
            "example": "61e51d05a4864953ba406af3"
          },
          "direct_devices": {
            "description": "Direct devices",
            "type": "array",
            "items": { "$ref": "#/components/schemas/GetDirectDeviceOutputDTO" }
          },
          "current_ip": {
            "type": "string",
            "description": "Current ip",
            "example": "12.12.11.10"
          },
          "mac_address": {
            "type": "string",
            "description": "MAC address",
            "example": "00:26:57:00:1f:02"
          },
          "configuration": {
            "type": "object",
            "description": "Configuration",
            "example": { "key1": "value1", "key2": "value2" }
          },
          "status": {
            "type": "string",
            "description": "Status",
            "example": "active"
          }
        },
        "required": ["id"]
      },
      "UpdateFoxDTO": {
        "type": "object",
        "properties": {
          "reference_number": {
            "type": "string",
            "description": "Reference number",
            "example": "1024"
          },
          "fawn_port": {
            "type": "number",
            "description": "Fawn port",
            "example": 5000
          },
          "place_id": {
            "type": "string",
            "description": "Place id (mongo id)",
            "example": "61e51d05a4864953ba406af3"
          },
          "current_ip": {
            "type": "string",
            "description": "Current ip",
            "example": "12.12.11.10"
          },
          "mac_address": {
            "type": "string",
            "description": "MAC address",
            "example": "00:26:57:00:1f:02"
          },
          "configuration": {
            "type": "object",
            "description": "Configuration",
            "example": { "key1": "value1", "key2": "value2" }
          },
          "status": {
            "type": "string",
            "description": "Status",
            "example": "active"
          },
          "connected_akitas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetConnectedAkitaOutputDTO"
            }
          },
          "direct_devices": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GetDirectDeviceOutputDTO" }
          }
        }
      },
      "CreateDeviceDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of device",
            "example": "My device"
          },
          "type": {
            "type": "string",
            "description": "The type of device (intercom, doorlock, etc.)",
            "example": "doorlock"
          },
          "group": {
            "type": "string",
            "description": "The group of device (smart home, utility, etc.)",
            "example": "smart home"
          },
          "eui": {
            "type": "string",
            "description": "The device zigbee id",
            "example": "000D6FFFFE20C64C"
          },
          "info": {
            "type": "object",
            "description": "The device info",
            "example": { "info_DTO": "is not implemented yet" }
          },
          "configuration": {
            "type": "object",
            "description": "The device configuration",
            "example": { "config_DTO": "is not implemented yet" }
          }
        },
        "required": ["title", "type", "eui", "configuration"]
      },
      "GetDeviceOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "MongoId of device",
            "example": "1289fca47aa01be3001"
          },
          "title": {
            "type": "string",
            "description": "The title of device",
            "example": "My device"
          },
          "type": {
            "type": "string",
            "description": "The type of device (intercom, doorlock, etc.)",
            "example": "doorlock"
          },
          "group": {
            "type": "string",
            "description": "The group of device (smart home, utility, etc.)",
            "example": "smart home"
          },
          "eui": {
            "type": "string",
            "description": "The device zigbee id",
            "example": "000D6FFFFE20C64C"
          },
          "info": {
            "type": "object",
            "description": "The device info",
            "example": { "info_DTO": "is not implemented yet" }
          },
          "configuration": {
            "type": "object",
            "description": "The device configuration",
            "example": { "config_DTO": "is not implemented yet" }
          }
        },
        "required": ["title"]
      },
      "UpdateDeviceDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of device",
            "example": "My device"
          },
          "type": {
            "type": "string",
            "description": "The type of device (intercom, doorlock, etc.)",
            "example": "doorlock"
          },
          "group": {
            "type": "string",
            "description": "The group of device (smart home, utility, etc.)",
            "example": "smart home"
          },
          "eui": {
            "type": "string",
            "description": "The device zigbee id",
            "example": "000D6FFFFE20C64C"
          },
          "info": {
            "type": "object",
            "description": "The device info",
            "example": { "info_DTO": "is not implemented yet" }
          },
          "configuration": {
            "type": "object",
            "description": "The device configuration",
            "example": { "config_DTO": "is not implemented yet" }
          }
        }
      },
      "CreateAkitaDTO": {
        "type": "object",
        "properties": {
          "mac_address": { "type": "object" },
          "ip": { "type": "object" },
          "configuration": { "type": "object" },
          "place_id": { "type": "object" },
          "devices": { "type": "array", "items": { "type": "object" } }
        },
        "required": ["mac_address", "ip", "configuration", "place_id"]
      },
      "UpdateAkitaDTO": {
        "type": "object",
        "properties": {
          "mac_address": { "type": "object" },
          "ip": { "type": "object" },
          "configuration": { "type": "object" },
          "place_id": { "type": "object" },
          "devices": { "type": "array", "items": { "type": "object" } }
        },
        "required": ["mac_address", "ip", "configuration", "place_id"]
      },
      "AddDeviceDto": {
        "type": "object",
        "properties": {
          "device_id": {
            "type": "string",
            "description": "Device's ID",
            "example": "61e51d06a4864953ba406af5"
          },
          "akita_id": {
            "type": "string",
            "description": "Device's ID",
            "example": "61e51d05a4864953ba406af3"
          }
        },
        "required": ["device_id", "akita_id"]
      },
      "ChannelDTO": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "description": "Channel number",
            "example": 2
          }
        }
      },
      "FlatDTO": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Flat number",
            "example": 12
          },
          "flat_id": {
            "type": "string",
            "description": "MongoId (_id in place collection)",
            "example": "61e51d05d10fcc0a53b8cbd9"
          }
        }
      },
      "StreamConfigurationDTO": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Intercom stream host",
            "example": "10.1.14"
          },
          "port": {
            "type": "string",
            "description": "Intercom stream port",
            "example": "10206"
          },
          "user": {
            "type": "string",
            "description": "Intercom stream username",
            "example": "admin"
          },
          "pass": {
            "type": "string",
            "description": "Intercom password",
            "example": "12341234"
          },
          "name": {
            "type": "string",
            "description": "Intercom stream name",
            "example": "Intercom #2"
          },
          "url_postfixes": {
            "description": "Intercom url postfixes",
            "example": ["intercom", "3"],
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "SipConfigurationDTO": {
        "type": "object",
        "properties": {
          "web_socket_url": {
            "type": "string",
            "description": "Intercom sip configuration password",
            "example": "sip:15@comfortech-dev-server.comfortel.pro"
          },
          "uri": {
            "type": "string",
            "description": "Intercom sip configuration password",
            "example": "sip:15@comfortech-dev-server.comfortel.pro"
          },
          "authorization_user": {
            "type": "string",
            "description": "Intercom sip configuration username (for auth from client)",
            "example": "15"
          },
          "password": {
            "type": "string",
            "description": "Intercom sip configuration password (for auth from client)",
            "example": "12341234"
          },
          "display_name": {
            "type": "string",
            "description": "Intercom sip configuration display name (just a title for call)",
            "example": "Intersviaz"
          },
          "caller_id": {
            "type": "string",
            "description": "Intercom sip configuration caller id (to call from SIP client)",
            "example": "200"
          },
          "number": {
            "type": "string",
            "description": "Intercom number (username for connection from intercom to SIP)",
            "example": "domofon"
          }
        }
      },
      "HttpConfigurationDTO": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Intercom http configuration host (local)",
            "example": "192.168.1.101"
          },
          "port": {
            "type": "string",
            "description": "Intercom http configuration port",
            "example": "80"
          },
          "user": {
            "type": "string",
            "description": "Intercom http configuration user",
            "example": "admin"
          },
          "pass": {
            "type": "string",
            "description": "Intercom http configuration password",
            "example": "12341234"
          }
        }
      },
      "IntercomConfigurationDTO": {
        "type": "object",
        "properties": {
          "stream": {
            "description": "Intercom stream configuration (for Owl) [DEPRECATED]",
            "allOf": [{ "$ref": "#/components/schemas/StreamConfigurationDTO" }]
          },
          "sip": {
            "description": "Intercom sip configuration (for client and server)",
            "allOf": [{ "$ref": "#/components/schemas/SipConfigurationDTO" }]
          },
          "http": {
            "description": "Intercom http configuration (with admin panel)",
            "allOf": [{ "$ref": "#/components/schemas/HttpConfigurationDTO" }]
          }
        }
      },
      "CreateIntercomDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Intercom device title",
            "example": "Krasnoselskoe highway, 1k3, entrance"
          },
          "stream_id": {
            "type": "string",
            "description": "Intercom stream id",
            "example": "6e9f4428-7e80-4258-87b9-aa2f24598541"
          },
          "channels": {
            "description": "Intercom stream id",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChannelDTO" }
          },
          "flats": {
            "description": "Intercom stream id",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FlatDTO" }
          },
          "info": {
            "type": "object",
            "description": "Intercom info",
            "example": {}
          },
          "configuration": {
            "description": "Intercom configuration",
            "allOf": [
              { "$ref": "#/components/schemas/IntercomConfigurationDTO" }
            ]
          }
        },
        "required": ["title"]
      },
      "GetIntercomOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Intercom id",
            "example": "63383ae40a36136c2301bc5b"
          },
          "title": {
            "type": "string",
            "description": "Intercom device title",
            "example": "Krasnoselskoe highway, 1k3, entrance"
          },
          "stream_id": {
            "type": "string",
            "description": "Intercom stream id",
            "example": "6e9f4428-7e80-4258-87b9-aa2f24598541"
          },
          "channels": {
            "description": "Intercom stream id",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChannelDTO" }
          },
          "flats": {
            "description": "Intercom stream id",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FlatDTO" }
          },
          "info": {
            "type": "object",
            "description": "Intercom info",
            "example": {}
          },
          "configuration": {
            "description": "Intercom configuration",
            "allOf": [
              { "$ref": "#/components/schemas/IntercomConfigurationDTO" }
            ]
          }
        }
      },
      "UpdateIntercomDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Intercom device title",
            "example": "Krasnoselskoe highway, 1k3, entrance"
          },
          "stream_id": {
            "type": "string",
            "description": "Intercom stream id",
            "example": "6e9f4428-7e80-4258-87b9-aa2f24598541"
          },
          "channels": {
            "description": "Intercom stream id",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChannelDTO" }
          },
          "flats": {
            "description": "Intercom stream id",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FlatDTO" }
          },
          "info": {
            "type": "object",
            "description": "Intercom info",
            "example": {}
          },
          "configuration": {
            "description": "Intercom configuration",
            "allOf": [
              { "$ref": "#/components/schemas/IntercomConfigurationDTO" }
            ]
          }
        }
      },
      "CreateStreamConfigurationDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the camera",
            "example": "Camera 3"
          },
          "host": {
            "type": "string",
            "description": "Host (IP address)",
            "example": "176.53.196.41"
          },
          "port": {
            "type": "string",
            "description": "Port number",
            "example": "8554"
          },
          "user": {
            "type": "string",
            "description": "Username",
            "example": "comfortech"
          },
          "pass": {
            "type": "string",
            "description": "Password",
            "example": "PoI456ZxC"
          },
          "url_postfixes": {
            "description": "URL postfixes",
            "example": ["camera", "3"],
            "type": "array",
            "items": { "type": "string" }
          },
          "protocol": {
            "type": "string",
            "description": "Protocol name",
            "example": "http"
          }
        },
        "required": ["name", "host", "port", "user", "pass"]
      },
      "CreateHttpConfigurationDTO": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host (Ip address) for http",
            "example": "192.168.1.250"
          },
          "port": {
            "type": "string",
            "description": "Port to connect",
            "example": "80"
          },
          "user": {
            "type": "string",
            "description": "username",
            "example": "admin"
          },
          "pass": {
            "type": "string",
            "description": "Password",
            "example": "12345678a"
          }
        },
        "required": ["host", "port", "user", "pass"]
      },
      "CreateCameraConfigurationDTO": {
        "type": "object",
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/CreateStreamConfigurationDTO"
          },
          "http": { "$ref": "#/components/schemas/CreateHttpConfigurationDTO" }
        }
      },
      "CreateCameraInfoDTO": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL for the camera",
            "example": "url://example.com:0000"
          }
        }
      },
      "CreateCameraDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Camera title",
            "example": "Cam 1"
          },
          "stream_id": {
            "type": "string",
            "description": "The stream id",
            "example": "16c02aab605e104f0a"
          },
          "channels": {
            "description": "The channels",
            "example": [
              { "channel_id": "16c02aab605e100aa1" },
              { "channel_id": "16c02aab605e100aa2" }
            ],
            "type": "array",
            "items": { "type": "object" }
          },
          "configuration": {
            "description": "The configuration of camera",
            "example": { "key_1": "value_1", "key_2": "value_2" },
            "allOf": [
              { "$ref": "#/components/schemas/CreateCameraConfigurationDTO" }
            ]
          },
          "info": {
            "description": "The camera info",
            "example": { "key_1": "value_1", "key_2": "value_2" },
            "allOf": [{ "$ref": "#/components/schemas/CreateCameraInfoDTO" }]
          }
        },
        "required": ["configuration", "info"]
      },
      "GetStreamConfigurationOutputDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the camera",
            "example": "Camera 3"
          },
          "host": {
            "type": "string",
            "description": "Host (IP address)",
            "example": "176.53.196.41"
          },
          "port": {
            "type": "string",
            "description": "Port number",
            "example": "8554"
          },
          "user": {
            "type": "string",
            "description": "Username",
            "example": "comfortech"
          },
          "pass": {
            "type": "string",
            "description": "Password",
            "example": "PoI456ZxC"
          },
          "url_postfixes": {
            "description": "URL postfixes",
            "example": ["camera", "3"],
            "type": "array",
            "items": { "type": "string" }
          },
          "protocol": {
            "type": "string",
            "description": "Protocol name",
            "example": "http"
          }
        }
      },
      "GetHttpConfigurationOutputDTO": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host (Ip address) for http",
            "example": "192.168.1.250"
          },
          "port": {
            "type": "string",
            "description": "Port to connect",
            "example": "80"
          },
          "user": {
            "type": "string",
            "description": "username",
            "example": "admin"
          },
          "pass": {
            "type": "string",
            "description": "Password",
            "example": "12345678a"
          }
        }
      },
      "GetCameraConfigurationOutputDTO": {
        "type": "object",
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/GetStreamConfigurationOutputDTO"
          },
          "http": {
            "$ref": "#/components/schemas/GetHttpConfigurationOutputDTO"
          }
        }
      },
      "GetCameraInfoOutputDTO": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL for the camera",
            "example": "url://example.com:0000"
          }
        }
      },
      "GetCameraOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Mongo id of the camera",
            "example": "ba92c400a7c2b71a5"
          },
          "title": {
            "type": "string",
            "description": "Camera title",
            "example": "Cam 1"
          },
          "stream_id": {
            "type": "string",
            "description": "The stream id",
            "example": "16c02aab605e104f0a"
          },
          "channels": {
            "description": "The channels",
            "example": [
              { "channel_id": "16c02aab605e100aa1" },
              { "channel_id": "16c02aab605e100aa2" }
            ],
            "type": "array",
            "items": { "type": "object" }
          },
          "configuration": {
            "description": "The configuration of camera",
            "example": { "key_1": "value_1", "key_2": "value_2" },
            "allOf": [
              { "$ref": "#/components/schemas/GetCameraConfigurationOutputDTO" }
            ]
          },
          "info": {
            "description": "The camera info",
            "example": { "key_1": "value_1", "key_2": "value_2" },
            "allOf": [{ "$ref": "#/components/schemas/GetCameraInfoOutputDTO" }]
          }
        }
      },
      "GetStreamConfigurationInputDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the camera",
            "example": "Camera 3"
          },
          "host": {
            "type": "string",
            "description": "Host (IP address)",
            "example": "176.53.196.41"
          },
          "port": {
            "type": "string",
            "description": "Port number",
            "example": "8554"
          },
          "user": {
            "type": "string",
            "description": "Username",
            "example": "comfortech"
          },
          "pass": {
            "type": "string",
            "description": "Password",
            "example": "PoI456ZxC"
          },
          "url_postfixes": {
            "description": "URL postfixes",
            "example": ["camera", "3"],
            "type": "array",
            "items": { "type": "string" }
          },
          "protocol": {
            "type": "string",
            "description": "Protocol name",
            "example": "http"
          }
        }
      },
      "GetHttpConfigurationInputDTO": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host (Ip address) for http",
            "example": "192.168.1.250"
          },
          "port": {
            "type": "string",
            "description": "Port to connect",
            "example": "80"
          },
          "user": {
            "type": "string",
            "description": "username",
            "example": "admin"
          },
          "pass": {
            "type": "string",
            "description": "Password",
            "example": "12345678a"
          }
        }
      },
      "GetCameraConfigurationInputDTO": {
        "type": "object",
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/GetStreamConfigurationInputDTO"
          },
          "http": {
            "$ref": "#/components/schemas/GetHttpConfigurationInputDTO"
          }
        }
      },
      "GetCameraInfoInputDTO": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL for the camera",
            "example": "url://example.com:0000"
          }
        }
      },
      "GetCameraInputDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Mongo id of the camera",
            "example": "ba92c400a7c2b71a5"
          },
          "title": {
            "type": "string",
            "description": "Camera title",
            "example": "Cam 1"
          },
          "stream_id": {
            "type": "string",
            "description": "The stream id",
            "example": "16c02aab605e104f0a"
          },
          "channels": {
            "description": "The channels",
            "example": [
              { "channel_id": "16c02aab605e100aa1" },
              { "channel_id": "16c02aab605e100aa2" }
            ],
            "type": "array",
            "items": { "type": "object" }
          },
          "configuration": {
            "description": "The configuration of camera",
            "example": { "key_1": "value_1", "key_2": "value_2" },
            "allOf": [
              { "$ref": "#/components/schemas/GetCameraConfigurationInputDTO" }
            ]
          },
          "info": {
            "description": "The camera info",
            "example": { "key_1": "value_1", "key_2": "value_2" },
            "allOf": [{ "$ref": "#/components/schemas/GetCameraInfoInputDTO" }]
          }
        }
      },
      "UpdateStreamConfigurationDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the camera",
            "example": "Camera 3"
          },
          "host": {
            "type": "string",
            "description": "Host (IP address)",
            "example": "176.53.196.41"
          },
          "port": {
            "type": "string",
            "description": "Port number",
            "example": "8554"
          },
          "user": {
            "type": "string",
            "description": "Username",
            "example": "comfortech"
          },
          "pass": {
            "type": "string",
            "description": "Password",
            "example": "PoI456ZxC"
          },
          "url_postfixes": {
            "description": "URL postfixes",
            "example": ["camera", "3"],
            "type": "array",
            "items": { "type": "string" }
          },
          "protocol": {
            "type": "string",
            "description": "Protocol name",
            "example": "http"
          }
        }
      },
      "UpdateHttpConfigurationDTO": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host (Ip address) for http",
            "example": "192.168.1.250"
          },
          "port": {
            "type": "string",
            "description": "Port to connect",
            "example": "80"
          },
          "user": {
            "type": "string",
            "description": "username",
            "example": "admin"
          },
          "pass": {
            "type": "string",
            "description": "Password",
            "example": "12345678a"
          }
        }
      },
      "UpdateCameraConfigurationDTO": {
        "type": "object",
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/UpdateStreamConfigurationDTO"
          },
          "http": { "$ref": "#/components/schemas/UpdateHttpConfigurationDTO" }
        }
      },
      "UpdateCameraInfoDTO": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL for the camera",
            "example": "url://example.com:0000"
          }
        }
      },
      "UpdateCameraDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Camera title",
            "example": "Cam 1"
          },
          "stream_id": {
            "type": "string",
            "description": "The stream id",
            "example": "16c02aab605e104f0a"
          },
          "channels": {
            "description": "The channels",
            "example": [
              { "channel_id": "16c02aab605e100aa1" },
              { "channel_id": "16c02aab605e100aa2" }
            ],
            "type": "array",
            "items": { "type": "object" }
          },
          "configuration": {
            "description": "The configuration of camera",
            "example": { "key_1": "value_1", "key_2": "value_2" },
            "allOf": [
              { "$ref": "#/components/schemas/UpdateCameraConfigurationDTO" }
            ]
          },
          "info": {
            "description": "The camera info",
            "example": { "key_1": "value_1", "key_2": "value_2" },
            "allOf": [{ "$ref": "#/components/schemas/UpdateCameraInfoDTO" }]
          }
        }
      },
      "GetServiceOutputDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "MongoId of service",
            "example": "72bff2a80016d10e"
          },
          "title": {
            "type": "string",
            "description": "Title of the service",
            "example": "New service"
          },
          "short_description": {
            "type": "string",
            "description": "Few words about the service",
            "example": "this is the best service ever"
          },
          "full_description": {
            "type": "string",
            "description": "Detailed information about the service",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          },
          "base_service_id": {
            "type": "string",
            "description": "Mongo object id of the base servic",
            "example": "107f9ca6d0d1100f01"
          },
          "devices": {
            "description": "Devices attached to the service",
            "example": [
              "107f9ca6d0d1100f01",
              "107f9ca6d0d1100f02",
              "107f9ca6d0d1100f03"
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "banners": {
            "description": "Banners",
            "example": [{ "dto": "not implemented" }],
            "type": "array",
            "items": { "type": "object" }
          },
          "videos": {
            "description": "Videos",
            "example": [{ "dto": "not implemented" }],
            "type": "array",
            "items": { "type": "object" }
          },
          "settings": {
            "description": "Settings for the service",
            "example": [{ "key": "value" }],
            "type": "array",
            "items": { "type": "object" }
          }
        },
        "required": ["id"]
      },
      "CreateServiceDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the service",
            "example": "New service"
          },
          "short_description": {
            "type": "string",
            "description": "Few words about the service",
            "example": "this is the best service ever"
          },
          "full_description": {
            "type": "string",
            "description": "Detailed information about the service",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          },
          "base_service_id": {
            "type": "string",
            "description": "Mongo object id of the base servic",
            "example": "107f9ca6d0d1100f01"
          },
          "devices": {
            "description": "Devices attached to the service",
            "example": [
              "107f9ca6d0d1100f01",
              "107f9ca6d0d1100f02",
              "107f9ca6d0d1100f03"
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "banners": {
            "description": "Banners",
            "example": [{ "dto": "not implemented" }],
            "type": "array",
            "items": { "type": "object" }
          },
          "videos": {
            "description": "Videos",
            "example": [{ "dto": "not implemented" }],
            "type": "array",
            "items": { "type": "object" }
          },
          "settings": {
            "description": "Settings for the service",
            "example": [{ "key": "value" }],
            "type": "array",
            "items": { "type": "object" }
          }
        },
        "required": ["base_service_id"]
      },
      "UpdateServiceDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the service",
            "example": "New service"
          },
          "short_description": {
            "type": "string",
            "description": "Few words about the service",
            "example": "this is the best service ever"
          },
          "full_description": {
            "type": "string",
            "description": "Detailed information about the service",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          },
          "base_service_id": {
            "type": "string",
            "description": "Mongo object id of the base servic",
            "example": "107f9ca6d0d1100f01"
          },
          "devices": {
            "description": "Devices attached to the service",
            "example": [
              "107f9ca6d0d1100f01",
              "107f9ca6d0d1100f02",
              "107f9ca6d0d1100f03"
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "banners": {
            "description": "Banners",
            "example": [{ "dto": "not implemented" }],
            "type": "array",
            "items": { "type": "object" }
          },
          "videos": {
            "description": "Videos",
            "example": [{ "dto": "not implemented" }],
            "type": "array",
            "items": { "type": "object" }
          },
          "settings": {
            "description": "Settings for the service",
            "example": [{ "key": "value" }],
            "type": "array",
            "items": { "type": "object" }
          }
        }
      }
    }
  }
}
